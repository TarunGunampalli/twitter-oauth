{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst client_subclient_1 = __importDefault(require(\"../client.subclient\"));\n\nconst globals_1 = require(\"../globals\");\n\nconst paginators_1 = require(\"../paginators\");\n\nconst client_v2_labs_read_1 = __importDefault(require(\"../v2-labs/client.v2.labs.read\"));\n\nconst user_paginator_v2_1 = require(\"../paginators/user.paginator.v2\");\n\nconst helpers_1 = require(\"../helpers\");\n/**\n * Base Twitter v2 client with only read right.\n */\n\n\nclass TwitterApiv2ReadOnly extends client_subclient_1.default {\n  constructor() {\n    super(...arguments);\n    this._prefix = globals_1.API_V2_PREFIX;\n  }\n  /* Sub-clients */\n\n  /**\n   * Get a client for v2 labs endpoints.\n   */\n\n\n  get labs() {\n    if (this._labs) return this._labs;\n    return this._labs = new client_v2_labs_read_1.default(this);\n  }\n  /* Tweets */\n\n  /**\n   * The recent search endpoint returns Tweets from the last seven days that match a search query.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-recent\n   */\n\n\n  async search(query) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const queryParams = { ...options,\n      query\n    };\n    const initialRq = await this.get('tweets/search/recent', queryParams, {\n      fullResponse: true\n    });\n    return new paginators_1.TweetSearchRecentV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * The full-archive search endpoint returns the complete history of public Tweets matching a search query;\n   * since the first Tweet was created March 26, 2006.\n   *\n   * This endpoint is only available to those users who have been approved for the Academic Research product track.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-all\n   */\n\n\n  async searchAll(query) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const queryParams = { ...options,\n      query\n    };\n    const initialRq = await this.get('tweets/search/all', queryParams, {\n      fullResponse: true\n    });\n    return new paginators_1.TweetSearchAllV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns a variety of information about a single Tweet specified by the requested ID.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets-id\n   *\n   * OAuth2 scope: `users.read`, `tweet.read`\n   */\n\n\n  singleTweet(tweetId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('tweets/:id', options, {\n      params: {\n        id: tweetId\n      }\n    });\n  }\n  /**\n   * Returns a variety of information about tweets specified by list of IDs.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets\n   *\n   * OAuth2 scope: `users.read`, `tweet.read`\n   */\n\n\n  tweets(tweetIds) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('tweets', {\n      ids: tweetIds,\n      ...options\n    });\n  }\n  /**\n   * The recent Tweet counts endpoint returns count of Tweets from the last seven days that match a search query.\n   * OAuth2 Bearer auth only.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/counts/api-reference/get-tweets-counts-recent\n   */\n\n\n  tweetCountRecent(query) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('tweets/counts/recent', {\n      query,\n      ...options\n    });\n  }\n  /**\n   * This endpoint is only available to those users who have been approved for the Academic Research product track.\n   * The full-archive search endpoint returns the complete history of public Tweets matching a search query;\n   * since the first Tweet was created March 26, 2006.\n   * OAuth2 Bearer auth only.\n   * **This endpoint has pagination, yet it is not supported by bundled paginators. Use `next_token` to fetch next page.**\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/counts/api-reference/get-tweets-counts-all\n   */\n\n\n  tweetCountAll(query) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('tweets/counts/all', {\n      query,\n      ...options\n    });\n  }\n  /**\n   * Allows you to get information about who has Retweeted a Tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/get-tweets-id-retweeted_by\n   */\n\n\n  tweetRetweetedBy(tweetId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('tweets/:id/retweeted_by', options, {\n      params: {\n        id: tweetId\n      }\n    });\n  }\n  /**\n   * Allows you to get information about who has Liked a Tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/get-tweets-id-liking_users\n   */\n\n\n  tweetLikedBy(tweetId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('tweets/:id/liking_users', options, {\n      params: {\n        id: tweetId\n      }\n    });\n  }\n  /**\n   * Returns Tweets composed by a single user, specified by the requested user ID.\n   * By default, the most recent ten Tweets are returned per request.\n   * Using pagination, the most recent 3,200 Tweets can be retrieved.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-tweets\n   */\n\n\n  async userTimeline(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const initialRq = await this.get('users/:id/tweets', options, {\n      fullResponse: true,\n      params: {\n        id: userId\n      }\n    });\n    return new paginators_1.TweetUserTimelineV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: options,\n      sharedParams: {\n        id: userId\n      }\n    });\n  }\n  /**\n   * Returns Tweets mentioning a single user specified by the requested user ID.\n   * By default, the most recent ten Tweets are returned per request.\n   * Using pagination, up to the most recent 800 Tweets can be retrieved.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-mentions\n   */\n\n\n  async userMentionTimeline(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const initialRq = await this.get('users/:id/mentions', options, {\n      fullResponse: true,\n      params: {\n        id: userId\n      }\n    });\n    return new paginators_1.TweetUserMentionTimelineV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: options,\n      sharedParams: {\n        id: userId\n      }\n    });\n  }\n  /* Users */\n\n  /**\n   * Returns information about an authorized user.\n   * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-me\n   *\n   * OAuth2 scopes: `tweet.read` & `users.read`\n   */\n\n\n  me() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.get('users/me', options);\n  }\n  /**\n   * Returns a variety of information about a single user specified by the requested ID.\n   * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-id\n   */\n\n\n  user(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('users/:id', options, {\n      params: {\n        id: userId\n      }\n    });\n  }\n  /**\n   * Returns a variety of information about one or more users specified by the requested IDs.\n   * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users\n   */\n\n\n  users(userIds) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const ids = Array.isArray(userIds) ? userIds.join(',') : userIds;\n    return this.get('users', { ...options,\n      ids\n    });\n  }\n  /**\n   * Returns a variety of information about a single user specified by their username.\n   * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by-username-username\n   */\n\n\n  userByUsername(username) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('users/by/username/:username', options, {\n      params: {\n        username\n      }\n    });\n  }\n  /**\n   * Returns a variety of information about one or more users specified by their usernames.\n   * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by\n   *\n   * OAuth2 scope: `users.read`, `tweet.read`\n   */\n\n\n  usersByUsernames(usernames) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    usernames = Array.isArray(usernames) ? usernames.join(',') : usernames;\n    return this.get('users/by', { ...options,\n      usernames\n    });\n  }\n\n  async followers(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      asPaginator,\n      ...parameters\n    } = options;\n    const params = {\n      id: userId\n    };\n\n    if (!asPaginator) {\n      return this.get('users/:id/followers', parameters, {\n        params\n      });\n    }\n\n    const initialRq = await this.get('users/:id/followers', parameters, {\n      fullResponse: true,\n      params\n    });\n    return new user_paginator_v2_1.UserFollowersV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: parameters,\n      sharedParams: params\n    });\n  }\n\n  async following(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      asPaginator,\n      ...parameters\n    } = options;\n    const params = {\n      id: userId\n    };\n\n    if (!asPaginator) {\n      return this.get('users/:id/following', parameters, {\n        params\n      });\n    }\n\n    const initialRq = await this.get('users/:id/following', parameters, {\n      fullResponse: true,\n      params\n    });\n    return new user_paginator_v2_1.UserFollowingV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: parameters,\n      sharedParams: params\n    });\n  }\n  /**\n   * Allows you to get information about a user’s liked Tweets.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/get-users-id-liked_tweets\n   */\n\n\n  async userLikedTweets(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const params = {\n      id: userId\n    };\n    const initialRq = await this.get('users/:id/liked_tweets', options, {\n      fullResponse: true,\n      params\n    });\n    return new paginators_1.TweetV2UserLikedTweetsPaginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: { ...options\n      },\n      sharedParams: params\n    });\n  }\n  /**\n   * Returns a list of users who are blocked by the authenticating user.\n   * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/get-users-blocking\n   */\n\n\n  async userBlockingUsers(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const params = {\n      id: userId\n    };\n    const initialRq = await this.get('users/:id/blocking', options, {\n      fullResponse: true,\n      params\n    });\n    return new user_paginator_v2_1.UserBlockingUsersV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: { ...options\n      },\n      sharedParams: params\n    });\n  }\n  /**\n   * Returns a list of users who are muted by the authenticating user.\n   * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/get-users-muting\n   */\n\n\n  async userMutingUsers(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const params = {\n      id: userId\n    };\n    const initialRq = await this.get('users/:id/muting', options, {\n      fullResponse: true,\n      params\n    });\n    return new user_paginator_v2_1.UserMutingUsersV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: { ...options\n      },\n      sharedParams: params\n    });\n  }\n  /* Spaces */\n\n  /**\n   * Get a single space by ID.\n   * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-id\n   *\n   * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n   */\n\n\n  space(spaceId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('spaces/:id', options, {\n      params: {\n        id: spaceId\n      }\n    });\n  }\n  /**\n   * Get spaces using their IDs.\n   * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces\n   *\n   * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n   */\n\n\n  spaces(spaceIds) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('spaces', {\n      ids: spaceIds,\n      ...options\n    });\n  }\n  /**\n   * Get spaces using their creator user ID(s). (no pagination available)\n   * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-by-creator-ids\n   *\n   * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n   */\n\n\n  spacesByCreators(creatorIds) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('spaces/by/creator_ids', {\n      user_ids: creatorIds,\n      ...options\n    });\n  }\n  /**\n   * Search through spaces using multiple params. (no pagination available)\n   * https://developer.twitter.com/en/docs/twitter-api/spaces/search/api-reference/get-spaces-search\n   */\n\n\n  searchSpaces(options) {\n    return this.get('spaces/search', options);\n  }\n\n  searchStream() {\n    let {\n      autoConnect,\n      ...options\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.getStream('tweets/search/stream', options, {\n      payloadIsError: helpers_1.isTweetStreamV2ErrorPayload,\n      autoConnect\n    });\n  }\n  /**\n   * Return a list of rules currently active on the streaming endpoint, either as a list or individually.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/get-tweets-search-stream-rules\n   */\n\n\n  streamRules() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.get('tweets/search/stream/rules', options);\n  }\n\n  updateStreamRules(options) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.post('tweets/search/stream/rules', options, {\n      query\n    });\n  }\n\n  sampleStream() {\n    let {\n      autoConnect,\n      ...options\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.getStream('tweets/sample/stream', options, {\n      payloadIsError: helpers_1.isTweetStreamV2ErrorPayload,\n      autoConnect\n    });\n  }\n  /* Batch compliance */\n\n  /**\n   * Returns a list of recent compliance jobs.\n   * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs\n   */\n\n\n  complianceJobs(options) {\n    return this.get('compliance/jobs', options);\n  }\n  /**\n   * Get a single compliance job with the specified ID.\n   * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs-id\n   */\n\n\n  complianceJob(jobId) {\n    return this.get('compliance/jobs/:id', undefined, {\n      params: {\n        id: jobId\n      }\n    });\n  }\n  /**\n   * Creates a new compliance job for Tweet IDs or user IDs, send your file, await result and parse it into an array.\n   * You can run one batch job at a time. Returns the created job, but **not the job result!**.\n   *\n   * You can obtain the result (**after job is completed**) with `.complianceJobResult`.\n   * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/post-compliance-jobs\n   */\n\n\n  async sendComplianceJob(jobParams) {\n    const job = await this.post('compliance/jobs', {\n      type: jobParams.type,\n      name: jobParams.name\n    }); // Send the IDs\n\n    const rawIdsBody = jobParams.ids instanceof Buffer ? jobParams.ids : Buffer.from(jobParams.ids.join('\\n')); // Upload the IDs\n\n    await this.put(job.data.upload_url, rawIdsBody, {\n      forceBodyMode: 'raw',\n      enableAuth: false,\n      headers: {\n        'Content-Type': 'text/plain'\n      },\n      prefix: ''\n    });\n    return job;\n  }\n  /**\n   * Get the result of a running or completed job, obtained through `.complianceJob`, `.complianceJobs` or `.sendComplianceJob`.\n   * If job is still running (`in_progress`), it will await until job is completed. **This could be quite long!**\n   * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/post-compliance-jobs\n   */\n\n\n  async complianceJobResult(job) {\n    let runningJob = job;\n\n    while (runningJob.status !== 'complete') {\n      if (runningJob.status === 'expired' || runningJob.status === 'failed') {\n        throw new Error('Job failed to be completed.');\n      }\n\n      await new Promise(resolve => setTimeout(resolve, 3500));\n      runningJob = (await this.complianceJob(job.id)).data;\n    } // Download and parse result\n\n\n    const result = await this.get(job.download_url, undefined, {\n      enableAuth: false,\n      prefix: ''\n    });\n    return result.trim().split('\\n').filter(line => line).map(line => JSON.parse(line));\n  }\n\n}\n\nexports.default = TwitterApiv2ReadOnly;","map":{"version":3,"sources":["/Users/tarungunampalli/Documents/twitter-oauth/node_modules/twitter-api-v2/dist/v2/client.v2.read.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","client_subclient_1","require","globals_1","paginators_1","client_v2_labs_read_1","user_paginator_v2_1","helpers_1","TwitterApiv2ReadOnly","default","constructor","arguments","_prefix","API_V2_PREFIX","labs","_labs","search","query","options","queryParams","initialRq","get","fullResponse","TweetSearchRecentV2Paginator","realData","data","rateLimit","instance","searchAll","TweetSearchAllV2Paginator","singleTweet","tweetId","params","id","tweets","tweetIds","ids","tweetCountRecent","tweetCountAll","tweetRetweetedBy","tweetLikedBy","userTimeline","userId","TweetUserTimelineV2Paginator","sharedParams","userMentionTimeline","TweetUserMentionTimelineV2Paginator","me","user","users","userIds","Array","isArray","join","userByUsername","username","usersByUsernames","usernames","followers","asPaginator","parameters","UserFollowersV2Paginator","following","UserFollowingV2Paginator","userLikedTweets","TweetV2UserLikedTweetsPaginator","userBlockingUsers","UserBlockingUsersV2Paginator","userMutingUsers","UserMutingUsersV2Paginator","space","spaceId","spaces","spaceIds","spacesByCreators","creatorIds","user_ids","searchSpaces","searchStream","autoConnect","getStream","payloadIsError","isTweetStreamV2ErrorPayload","streamRules","updateStreamRules","post","sampleStream","complianceJobs","complianceJob","jobId","undefined","sendComplianceJob","jobParams","job","type","name","rawIdsBody","Buffer","from","put","upload_url","forceBodyMode","enableAuth","headers","prefix","complianceJobResult","runningJob","status","Error","Promise","resolve","setTimeout","result","download_url","trim","split","filter","line","map","JSON","parse"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_subclient_1 = __importDefault(require(\"../client.subclient\"));\nconst globals_1 = require(\"../globals\");\nconst paginators_1 = require(\"../paginators\");\nconst client_v2_labs_read_1 = __importDefault(require(\"../v2-labs/client.v2.labs.read\"));\nconst user_paginator_v2_1 = require(\"../paginators/user.paginator.v2\");\nconst helpers_1 = require(\"../helpers\");\n/**\n * Base Twitter v2 client with only read right.\n */\nclass TwitterApiv2ReadOnly extends client_subclient_1.default {\n    constructor() {\n        super(...arguments);\n        this._prefix = globals_1.API_V2_PREFIX;\n    }\n    /* Sub-clients */\n    /**\n     * Get a client for v2 labs endpoints.\n     */\n    get labs() {\n        if (this._labs)\n            return this._labs;\n        return this._labs = new client_v2_labs_read_1.default(this);\n    }\n    /* Tweets */\n    /**\n     * The recent search endpoint returns Tweets from the last seven days that match a search query.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-recent\n     */\n    async search(query, options = {}) {\n        const queryParams = { ...options, query };\n        const initialRq = await this.get('tweets/search/recent', queryParams, { fullResponse: true });\n        return new paginators_1.TweetSearchRecentV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * The full-archive search endpoint returns the complete history of public Tweets matching a search query;\n     * since the first Tweet was created March 26, 2006.\n     *\n     * This endpoint is only available to those users who have been approved for the Academic Research product track.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-all\n     */\n    async searchAll(query, options = {}) {\n        const queryParams = { ...options, query };\n        const initialRq = await this.get('tweets/search/all', queryParams, { fullResponse: true });\n        return new paginators_1.TweetSearchAllV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns a variety of information about a single Tweet specified by the requested ID.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets-id\n     *\n     * OAuth2 scope: `users.read`, `tweet.read`\n     */\n    singleTweet(tweetId, options = {}) {\n        return this.get('tweets/:id', options, { params: { id: tweetId } });\n    }\n    /**\n     * Returns a variety of information about tweets specified by list of IDs.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets\n     *\n     * OAuth2 scope: `users.read`, `tweet.read`\n     */\n    tweets(tweetIds, options = {}) {\n        return this.get('tweets', { ids: tweetIds, ...options });\n    }\n    /**\n     * The recent Tweet counts endpoint returns count of Tweets from the last seven days that match a search query.\n     * OAuth2 Bearer auth only.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/counts/api-reference/get-tweets-counts-recent\n     */\n    tweetCountRecent(query, options = {}) {\n        return this.get('tweets/counts/recent', { query, ...options });\n    }\n    /**\n     * This endpoint is only available to those users who have been approved for the Academic Research product track.\n     * The full-archive search endpoint returns the complete history of public Tweets matching a search query;\n     * since the first Tweet was created March 26, 2006.\n     * OAuth2 Bearer auth only.\n     * **This endpoint has pagination, yet it is not supported by bundled paginators. Use `next_token` to fetch next page.**\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/counts/api-reference/get-tweets-counts-all\n     */\n    tweetCountAll(query, options = {}) {\n        return this.get('tweets/counts/all', { query, ...options });\n    }\n    /**\n     * Allows you to get information about who has Retweeted a Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/get-tweets-id-retweeted_by\n     */\n    tweetRetweetedBy(tweetId, options = {}) {\n        return this.get('tweets/:id/retweeted_by', options, { params: { id: tweetId } });\n    }\n    /**\n     * Allows you to get information about who has Liked a Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/get-tweets-id-liking_users\n     */\n    tweetLikedBy(tweetId, options = {}) {\n        return this.get('tweets/:id/liking_users', options, { params: { id: tweetId } });\n    }\n    /**\n     * Returns Tweets composed by a single user, specified by the requested user ID.\n     * By default, the most recent ten Tweets are returned per request.\n     * Using pagination, the most recent 3,200 Tweets can be retrieved.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-tweets\n     */\n    async userTimeline(userId, options = {}) {\n        const initialRq = await this.get('users/:id/tweets', options, {\n            fullResponse: true,\n            params: { id: userId },\n        });\n        return new paginators_1.TweetUserTimelineV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: options,\n            sharedParams: { id: userId },\n        });\n    }\n    /**\n     * Returns Tweets mentioning a single user specified by the requested user ID.\n     * By default, the most recent ten Tweets are returned per request.\n     * Using pagination, up to the most recent 800 Tweets can be retrieved.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-mentions\n     */\n    async userMentionTimeline(userId, options = {}) {\n        const initialRq = await this.get('users/:id/mentions', options, {\n            fullResponse: true,\n            params: { id: userId },\n        });\n        return new paginators_1.TweetUserMentionTimelineV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: options,\n            sharedParams: { id: userId },\n        });\n    }\n    /* Users */\n    /**\n     * Returns information about an authorized user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-me\n     *\n     * OAuth2 scopes: `tweet.read` & `users.read`\n     */\n    me(options = {}) {\n        return this.get('users/me', options);\n    }\n    /**\n     * Returns a variety of information about a single user specified by the requested ID.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-id\n     */\n    user(userId, options = {}) {\n        return this.get('users/:id', options, { params: { id: userId } });\n    }\n    /**\n     * Returns a variety of information about one or more users specified by the requested IDs.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users\n     */\n    users(userIds, options = {}) {\n        const ids = Array.isArray(userIds) ? userIds.join(',') : userIds;\n        return this.get('users', { ...options, ids });\n    }\n    /**\n     * Returns a variety of information about a single user specified by their username.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by-username-username\n     */\n    userByUsername(username, options = {}) {\n        return this.get('users/by/username/:username', options, { params: { username } });\n    }\n    /**\n     * Returns a variety of information about one or more users specified by their usernames.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by\n     *\n     * OAuth2 scope: `users.read`, `tweet.read`\n     */\n    usersByUsernames(usernames, options = {}) {\n        usernames = Array.isArray(usernames) ? usernames.join(',') : usernames;\n        return this.get('users/by', { ...options, usernames });\n    }\n    async followers(userId, options = {}) {\n        const { asPaginator, ...parameters } = options;\n        const params = { id: userId };\n        if (!asPaginator) {\n            return this.get('users/:id/followers', parameters, { params });\n        }\n        const initialRq = await this.get('users/:id/followers', parameters, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserFollowersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: parameters,\n            sharedParams: params,\n        });\n    }\n    async following(userId, options = {}) {\n        const { asPaginator, ...parameters } = options;\n        const params = { id: userId };\n        if (!asPaginator) {\n            return this.get('users/:id/following', parameters, { params });\n        }\n        const initialRq = await this.get('users/:id/following', parameters, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserFollowingV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: parameters,\n            sharedParams: params,\n        });\n    }\n    /**\n     * Allows you to get information about a user’s liked Tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/get-users-id-liked_tweets\n     */\n    async userLikedTweets(userId, options = {}) {\n        const params = { id: userId };\n        const initialRq = await this.get('users/:id/liked_tweets', options, { fullResponse: true, params });\n        return new paginators_1.TweetV2UserLikedTweetsPaginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /**\n     * Returns a list of users who are blocked by the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/get-users-blocking\n     */\n    async userBlockingUsers(userId, options = {}) {\n        const params = { id: userId };\n        const initialRq = await this.get('users/:id/blocking', options, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserBlockingUsersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /**\n     * Returns a list of users who are muted by the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/get-users-muting\n     */\n    async userMutingUsers(userId, options = {}) {\n        const params = { id: userId };\n        const initialRq = await this.get('users/:id/muting', options, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserMutingUsersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /* Spaces */\n    /**\n     * Get a single space by ID.\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-id\n     *\n     * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n     */\n    space(spaceId, options = {}) {\n        return this.get('spaces/:id', options, { params: { id: spaceId } });\n    }\n    /**\n     * Get spaces using their IDs.\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces\n     *\n     * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n     */\n    spaces(spaceIds, options = {}) {\n        return this.get('spaces', { ids: spaceIds, ...options });\n    }\n    /**\n     * Get spaces using their creator user ID(s). (no pagination available)\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-by-creator-ids\n     *\n     * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n     */\n    spacesByCreators(creatorIds, options = {}) {\n        return this.get('spaces/by/creator_ids', { user_ids: creatorIds, ...options });\n    }\n    /**\n     * Search through spaces using multiple params. (no pagination available)\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/search/api-reference/get-spaces-search\n     */\n    searchSpaces(options) {\n        return this.get('spaces/search', options);\n    }\n    searchStream({ autoConnect, ...options } = {}) {\n        return this.getStream('tweets/search/stream', options, { payloadIsError: helpers_1.isTweetStreamV2ErrorPayload, autoConnect });\n    }\n    /**\n     * Return a list of rules currently active on the streaming endpoint, either as a list or individually.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/get-tweets-search-stream-rules\n     */\n    streamRules(options = {}) {\n        return this.get('tweets/search/stream/rules', options);\n    }\n    updateStreamRules(options, query = {}) {\n        return this.post('tweets/search/stream/rules', options, { query });\n    }\n    sampleStream({ autoConnect, ...options } = {}) {\n        return this.getStream('tweets/sample/stream', options, { payloadIsError: helpers_1.isTweetStreamV2ErrorPayload, autoConnect });\n    }\n    /* Batch compliance */\n    /**\n     * Returns a list of recent compliance jobs.\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs\n     */\n    complianceJobs(options) {\n        return this.get('compliance/jobs', options);\n    }\n    /**\n     * Get a single compliance job with the specified ID.\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs-id\n     */\n    complianceJob(jobId) {\n        return this.get('compliance/jobs/:id', undefined, { params: { id: jobId } });\n    }\n    /**\n     * Creates a new compliance job for Tweet IDs or user IDs, send your file, await result and parse it into an array.\n     * You can run one batch job at a time. Returns the created job, but **not the job result!**.\n     *\n     * You can obtain the result (**after job is completed**) with `.complianceJobResult`.\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/post-compliance-jobs\n     */\n    async sendComplianceJob(jobParams) {\n        const job = await this.post('compliance/jobs', { type: jobParams.type, name: jobParams.name });\n        // Send the IDs\n        const rawIdsBody = jobParams.ids instanceof Buffer ? jobParams.ids : Buffer.from(jobParams.ids.join('\\n'));\n        // Upload the IDs\n        await this.put(job.data.upload_url, rawIdsBody, {\n            forceBodyMode: 'raw',\n            enableAuth: false,\n            headers: { 'Content-Type': 'text/plain' },\n            prefix: '',\n        });\n        return job;\n    }\n    /**\n     * Get the result of a running or completed job, obtained through `.complianceJob`, `.complianceJobs` or `.sendComplianceJob`.\n     * If job is still running (`in_progress`), it will await until job is completed. **This could be quite long!**\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/post-compliance-jobs\n     */\n    async complianceJobResult(job) {\n        let runningJob = job;\n        while (runningJob.status !== 'complete') {\n            if (runningJob.status === 'expired' || runningJob.status === 'failed') {\n                throw new Error('Job failed to be completed.');\n            }\n            await new Promise(resolve => setTimeout(resolve, 3500));\n            runningJob = (await this.complianceJob(job.id)).data;\n        }\n        // Download and parse result\n        const result = await this.get(job.download_url, undefined, {\n            enableAuth: false,\n            prefix: '',\n        });\n        return result\n            .trim()\n            .split('\\n')\n            .filter(line => line)\n            .map(line => JSON.parse(line));\n    }\n}\nexports.default = TwitterApiv2ReadOnly;\n"]},"metadata":{},"sourceType":"script"}