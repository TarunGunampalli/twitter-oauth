{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst request_maker_mixin_1 = require(\"./client-mixins/request-maker.mixin\");\n/**\n * Base class for Twitter instances\n */\n\n\nclass TwitterApiBase extends request_maker_mixin_1.ClientRequestMaker {\n  constructor(token) {\n    super();\n    this._currentUser = null;\n    this._currentUserV2 = null;\n\n    if (typeof token === 'string') {\n      this._bearerToken = token;\n    } else if (token instanceof TwitterApiBase) {\n      this._accessToken = token._accessToken;\n      this._accessSecret = token._accessSecret;\n      this._consumerToken = token._consumerToken;\n      this._consumerSecret = token._consumerSecret;\n      this._oauth = token._oauth;\n      this._prefix = token._prefix;\n      this._bearerToken = token._bearerToken;\n      this._basicToken = token._basicToken;\n      this._clientId = token._clientId;\n      this._clientSecret = token._clientSecret;\n      this._rateLimits = token._rateLimits;\n    } else if (typeof token === 'object' && 'appKey' in token) {\n      this._consumerToken = token.appKey;\n      this._consumerSecret = token.appSecret;\n\n      if (token.accessToken && token.accessSecret) {\n        this._accessToken = token.accessToken;\n        this._accessSecret = token.accessSecret;\n      }\n\n      this._oauth = this.buildOAuth();\n    } else if (typeof token === 'object' && 'username' in token) {\n      const key = encodeURIComponent(token.username) + ':' + encodeURIComponent(token.password);\n      this._basicToken = Buffer.from(key).toString('base64');\n    } else if (typeof token === 'object' && 'clientId' in token) {\n      this._clientId = token.clientId;\n      this._clientSecret = token.clientSecret;\n    }\n  }\n  /* Prefix/Token handling */\n\n\n  setPrefix(prefix) {\n    this._prefix = prefix;\n  }\n\n  cloneWithPrefix(prefix) {\n    const clone = this.constructor(this);\n    clone.setPrefix(prefix);\n    return clone;\n  }\n\n  getActiveTokens() {\n    if (this._bearerToken) {\n      return {\n        type: 'oauth2',\n        bearerToken: this._bearerToken\n      };\n    } else if (this._basicToken) {\n      return {\n        type: 'basic',\n        token: this._basicToken\n      };\n    } else if (this._consumerSecret && this._oauth) {\n      return {\n        type: 'oauth-1.0a',\n        appKey: this._consumerToken,\n        appSecret: this._consumerSecret,\n        accessToken: this._accessToken,\n        accessSecret: this._accessSecret\n      };\n    } else if (this._clientId) {\n      return {\n        type: 'oauth2-user',\n        clientId: this._clientId\n      };\n    }\n\n    return {\n      type: 'none'\n    };\n  }\n  /* Rate limit cache */\n\n  /**\n   * Tells if you hit the Twitter rate limit for {endpoint}.\n   * (local data only, this should not ask anything to Twitter)\n   */\n\n\n  hasHitRateLimit(endpoint) {\n    var _a;\n\n    if (this.isRateLimitStatusObsolete(endpoint)) {\n      return false;\n    }\n\n    return ((_a = this.getLastRateLimitStatus(endpoint)) === null || _a === void 0 ? void 0 : _a.remaining) === 0;\n  }\n  /**\n   * Tells if you hit the returned Twitter rate limit for {endpoint} has expired.\n   * If client has no saved rate limit data for {endpoint}, this will gives you `true`.\n   */\n\n\n  isRateLimitStatusObsolete(endpoint) {\n    const rateLimit = this.getLastRateLimitStatus(endpoint);\n\n    if (rateLimit === undefined) {\n      return true;\n    } // Timestamps are exprimed in seconds, JS works with ms\n\n\n    return rateLimit.reset * 1000 < Date.now();\n  }\n  /**\n   * Get the last obtained Twitter rate limit information for {endpoint}.\n   * (local data only, this should not ask anything to Twitter)\n   */\n\n\n  getLastRateLimitStatus(endpoint) {\n    const endpointWithPrefix = endpoint.match(/^https?:\\/\\//) ? endpoint : this._prefix + endpoint;\n    return this._rateLimits[endpointWithPrefix];\n  }\n  /* Current user cache */\n\n  /** Get cached current user. */\n\n\n  async getCurrentUserObject() {\n    let forceFetch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (!forceFetch && this._currentUser) {\n      return this._currentUser;\n    }\n\n    const currentUser = await this.get('account/verify_credentials.json', {\n      tweet_mode: 'extended'\n    }, {\n      prefix: 'https://api.twitter.com/1.1/'\n    });\n    this._currentUser = currentUser;\n    return currentUser;\n  }\n  /**\n   * Get cached current user from v2 API.\n   * This can only be the slimest available `UserV2` object, with only `id`, `name` and `username` properties defined.\n   *\n   * To get a customized `UserV2Result`, use `.v2.me()`\n   *\n   * OAuth2 scopes: `tweet.read` & `users.read`\n   */\n\n\n  async getCurrentUserV2Object() {\n    let forceFetch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (!forceFetch && this._currentUserV2) {\n      return this._currentUserV2;\n    }\n\n    const currentUserV2 = await this.get('users/me', undefined, {\n      prefix: 'https://api.twitter.com/2/'\n    });\n    this._currentUserV2 = currentUserV2;\n    return currentUserV2;\n  }\n\n  async get(url) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let {\n      fullResponse,\n      prefix = this._prefix,\n      ...rest\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (prefix) url = prefix + url;\n    const resp = await this.send({\n      url,\n      method: 'GET',\n      query,\n      ...rest\n    });\n    return fullResponse ? resp : resp.data;\n  }\n\n  async delete(url) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let {\n      fullResponse,\n      prefix = this._prefix,\n      ...rest\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (prefix) url = prefix + url;\n    const resp = await this.send({\n      url,\n      method: 'DELETE',\n      query,\n      ...rest\n    });\n    return fullResponse ? resp : resp.data;\n  }\n\n  async post(url, body) {\n    let {\n      fullResponse,\n      prefix = this._prefix,\n      ...rest\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (prefix) url = prefix + url;\n    const resp = await this.send({\n      url,\n      method: 'POST',\n      body,\n      ...rest\n    });\n    return fullResponse ? resp : resp.data;\n  }\n\n  async put(url, body) {\n    let {\n      fullResponse,\n      prefix = this._prefix,\n      ...rest\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (prefix) url = prefix + url;\n    const resp = await this.send({\n      url,\n      method: 'PUT',\n      body,\n      ...rest\n    });\n    return fullResponse ? resp : resp.data;\n  }\n\n  async patch(url, body) {\n    let {\n      fullResponse,\n      prefix = this._prefix,\n      ...rest\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (prefix) url = prefix + url;\n    const resp = await this.send({\n      url,\n      method: 'PATCH',\n      body,\n      ...rest\n    });\n    return fullResponse ? resp : resp.data;\n  }\n\n  getStream(url, query) {\n    let {\n      prefix = this._prefix,\n      ...rest\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this.sendStream({\n      url: prefix ? prefix + url : url,\n      method: 'GET',\n      query,\n      ...rest\n    });\n  }\n\n  postStream(url, body) {\n    let {\n      prefix = this._prefix,\n      ...rest\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this.sendStream({\n      url: prefix ? prefix + url : url,\n      method: 'POST',\n      body,\n      ...rest\n    });\n  }\n\n}\n\nexports.default = TwitterApiBase;","map":{"version":3,"sources":["/Users/tarungunampalli/Documents/twitter-oauth/node_modules/twitter-api-v2/dist/client.base.js"],"names":["Object","defineProperty","exports","value","request_maker_mixin_1","require","TwitterApiBase","ClientRequestMaker","constructor","token","_currentUser","_currentUserV2","_bearerToken","_accessToken","_accessSecret","_consumerToken","_consumerSecret","_oauth","_prefix","_basicToken","_clientId","_clientSecret","_rateLimits","appKey","appSecret","accessToken","accessSecret","buildOAuth","key","encodeURIComponent","username","password","Buffer","from","toString","clientId","clientSecret","setPrefix","prefix","cloneWithPrefix","clone","getActiveTokens","type","bearerToken","hasHitRateLimit","endpoint","_a","isRateLimitStatusObsolete","getLastRateLimitStatus","remaining","rateLimit","undefined","reset","Date","now","endpointWithPrefix","match","getCurrentUserObject","forceFetch","currentUser","get","tweet_mode","getCurrentUserV2Object","currentUserV2","url","query","fullResponse","rest","resp","send","method","data","delete","post","body","put","patch","getStream","sendStream","postStream","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst request_maker_mixin_1 = require(\"./client-mixins/request-maker.mixin\");\n/**\n * Base class for Twitter instances\n */\nclass TwitterApiBase extends request_maker_mixin_1.ClientRequestMaker {\n    constructor(token) {\n        super();\n        this._currentUser = null;\n        this._currentUserV2 = null;\n        if (typeof token === 'string') {\n            this._bearerToken = token;\n        }\n        else if (token instanceof TwitterApiBase) {\n            this._accessToken = token._accessToken;\n            this._accessSecret = token._accessSecret;\n            this._consumerToken = token._consumerToken;\n            this._consumerSecret = token._consumerSecret;\n            this._oauth = token._oauth;\n            this._prefix = token._prefix;\n            this._bearerToken = token._bearerToken;\n            this._basicToken = token._basicToken;\n            this._clientId = token._clientId;\n            this._clientSecret = token._clientSecret;\n            this._rateLimits = token._rateLimits;\n        }\n        else if (typeof token === 'object' && 'appKey' in token) {\n            this._consumerToken = token.appKey;\n            this._consumerSecret = token.appSecret;\n            if (token.accessToken && token.accessSecret) {\n                this._accessToken = token.accessToken;\n                this._accessSecret = token.accessSecret;\n            }\n            this._oauth = this.buildOAuth();\n        }\n        else if (typeof token === 'object' && 'username' in token) {\n            const key = encodeURIComponent(token.username) + ':' + encodeURIComponent(token.password);\n            this._basicToken = Buffer.from(key).toString('base64');\n        }\n        else if (typeof token === 'object' && 'clientId' in token) {\n            this._clientId = token.clientId;\n            this._clientSecret = token.clientSecret;\n        }\n    }\n    /* Prefix/Token handling */\n    setPrefix(prefix) {\n        this._prefix = prefix;\n    }\n    cloneWithPrefix(prefix) {\n        const clone = this.constructor(this);\n        clone.setPrefix(prefix);\n        return clone;\n    }\n    getActiveTokens() {\n        if (this._bearerToken) {\n            return {\n                type: 'oauth2',\n                bearerToken: this._bearerToken,\n            };\n        }\n        else if (this._basicToken) {\n            return {\n                type: 'basic',\n                token: this._basicToken,\n            };\n        }\n        else if (this._consumerSecret && this._oauth) {\n            return {\n                type: 'oauth-1.0a',\n                appKey: this._consumerToken,\n                appSecret: this._consumerSecret,\n                accessToken: this._accessToken,\n                accessSecret: this._accessSecret,\n            };\n        }\n        else if (this._clientId) {\n            return {\n                type: 'oauth2-user',\n                clientId: this._clientId,\n            };\n        }\n        return { type: 'none' };\n    }\n    /* Rate limit cache */\n    /**\n     * Tells if you hit the Twitter rate limit for {endpoint}.\n     * (local data only, this should not ask anything to Twitter)\n     */\n    hasHitRateLimit(endpoint) {\n        var _a;\n        if (this.isRateLimitStatusObsolete(endpoint)) {\n            return false;\n        }\n        return ((_a = this.getLastRateLimitStatus(endpoint)) === null || _a === void 0 ? void 0 : _a.remaining) === 0;\n    }\n    /**\n     * Tells if you hit the returned Twitter rate limit for {endpoint} has expired.\n     * If client has no saved rate limit data for {endpoint}, this will gives you `true`.\n     */\n    isRateLimitStatusObsolete(endpoint) {\n        const rateLimit = this.getLastRateLimitStatus(endpoint);\n        if (rateLimit === undefined) {\n            return true;\n        }\n        // Timestamps are exprimed in seconds, JS works with ms\n        return (rateLimit.reset * 1000) < Date.now();\n    }\n    /**\n     * Get the last obtained Twitter rate limit information for {endpoint}.\n     * (local data only, this should not ask anything to Twitter)\n     */\n    getLastRateLimitStatus(endpoint) {\n        const endpointWithPrefix = endpoint.match(/^https?:\\/\\//) ? endpoint : (this._prefix + endpoint);\n        return this._rateLimits[endpointWithPrefix];\n    }\n    /* Current user cache */\n    /** Get cached current user. */\n    async getCurrentUserObject(forceFetch = false) {\n        if (!forceFetch && this._currentUser) {\n            return this._currentUser;\n        }\n        const currentUser = await this.get('account/verify_credentials.json', { tweet_mode: 'extended' }, { prefix: 'https://api.twitter.com/1.1/' });\n        this._currentUser = currentUser;\n        return currentUser;\n    }\n    /**\n     * Get cached current user from v2 API.\n     * This can only be the slimest available `UserV2` object, with only `id`, `name` and `username` properties defined.\n     *\n     * To get a customized `UserV2Result`, use `.v2.me()`\n     *\n     * OAuth2 scopes: `tweet.read` & `users.read`\n     */\n    async getCurrentUserV2Object(forceFetch = false) {\n        if (!forceFetch && this._currentUserV2) {\n            return this._currentUserV2;\n        }\n        const currentUserV2 = await this.get('users/me', undefined, { prefix: 'https://api.twitter.com/2/' });\n        this._currentUserV2 = currentUserV2;\n        return currentUserV2;\n    }\n    async get(url, query = {}, { fullResponse, prefix = this._prefix, ...rest } = {}) {\n        if (prefix)\n            url = prefix + url;\n        const resp = await this.send({\n            url,\n            method: 'GET',\n            query,\n            ...rest,\n        });\n        return fullResponse ? resp : resp.data;\n    }\n    async delete(url, query = {}, { fullResponse, prefix = this._prefix, ...rest } = {}) {\n        if (prefix)\n            url = prefix + url;\n        const resp = await this.send({\n            url,\n            method: 'DELETE',\n            query,\n            ...rest,\n        });\n        return fullResponse ? resp : resp.data;\n    }\n    async post(url, body, { fullResponse, prefix = this._prefix, ...rest } = {}) {\n        if (prefix)\n            url = prefix + url;\n        const resp = await this.send({\n            url,\n            method: 'POST',\n            body,\n            ...rest,\n        });\n        return fullResponse ? resp : resp.data;\n    }\n    async put(url, body, { fullResponse, prefix = this._prefix, ...rest } = {}) {\n        if (prefix)\n            url = prefix + url;\n        const resp = await this.send({\n            url,\n            method: 'PUT',\n            body,\n            ...rest,\n        });\n        return fullResponse ? resp : resp.data;\n    }\n    async patch(url, body, { fullResponse, prefix = this._prefix, ...rest } = {}) {\n        if (prefix)\n            url = prefix + url;\n        const resp = await this.send({\n            url,\n            method: 'PATCH',\n            body,\n            ...rest,\n        });\n        return fullResponse ? resp : resp.data;\n    }\n    getStream(url, query, { prefix = this._prefix, ...rest } = {}) {\n        return this.sendStream({\n            url: prefix ? prefix + url : url,\n            method: 'GET',\n            query,\n            ...rest,\n        });\n    }\n    postStream(url, body, { prefix = this._prefix, ...rest } = {}) {\n        return this.sendStream({\n            url: prefix ? prefix + url : url,\n            method: 'POST',\n            body,\n            ...rest,\n        });\n    }\n}\nexports.default = TwitterApiBase;\n"]},"metadata":{},"sourceType":"script"}