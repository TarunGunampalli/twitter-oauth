{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RequestParamHelpers = void 0;\n\nconst form_data_helper_1 = require(\"./form-data.helper\");\n/* Helpers functions that are specific to this class but do not depends on instance */\n\n\nclass RequestParamHelpers {\n  static formatQueryToString(query) {\n    const formattedQuery = {};\n\n    for (const prop in query) {\n      if (typeof query[prop] === 'string') {\n        formattedQuery[prop] = query[prop];\n      } else if (typeof query[prop] !== 'undefined') {\n        formattedQuery[prop] = String(query[prop]);\n      }\n    }\n\n    return formattedQuery;\n  }\n\n  static autoDetectBodyType(url) {\n    if (url.pathname.startsWith('/2/') || url.pathname.startsWith('/labs/2/')) {\n      // oauth2 takes url encoded\n      if (url.password.startsWith('/2/oauth2')) {\n        return 'url';\n      } // Twitter API v2 has JSON-encoded requests for everything else\n\n\n      return 'json';\n    }\n\n    if (url.hostname === 'upload.twitter.com') {\n      if (url.pathname === '/1.1/media/upload.json') {\n        return 'form-data';\n      } // json except for media/upload command, that is form-data.\n\n\n      return 'json';\n    }\n\n    const endpoint = url.pathname.split('/1.1/', 2)[1];\n\n    if (this.JSON_1_1_ENDPOINTS.has(endpoint)) {\n      return 'json';\n    }\n\n    return 'url';\n  }\n\n  static addQueryParamsToUrl(url, query) {\n    for (const [key, value] of Object.entries(query)) {\n      url.searchParams.append(key, value);\n    }\n\n    if (url.search) {\n      // URLSearchParams doesnt encode '*', but Twitter wants it encoded.\n      url.search = url.search.replace(/\\*/g, '%2A');\n    }\n  }\n\n  static constructBodyParams(body, headers, mode) {\n    if (body instanceof Buffer) {\n      return body;\n    }\n\n    if (mode === 'json') {\n      headers['content-type'] = 'application/json;charset=UTF-8';\n      return JSON.stringify(body);\n    } else if (mode === 'url') {\n      headers['content-type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\n\n      if (Object.keys(body).length) {\n        return new URLSearchParams(body).toString().replace(/\\*/g, '%2A'); // URLSearchParams doesnt encode '*', but Twitter wants it encoded.\n      }\n\n      return '';\n    } else if (mode === 'raw') {\n      throw new Error('You can only use raw body mode with Buffers. To give a string, use Buffer.from(str).');\n    } else {\n      const form = new form_data_helper_1.FormDataHelper();\n\n      for (const parameter in body) {\n        form.append(parameter, body[parameter]);\n      }\n\n      const formHeaders = form.getHeaders();\n      headers['content-type'] = formHeaders['content-type'];\n      return form.getBuffer();\n    }\n  }\n\n  static setBodyLengthHeader(options, body) {\n    var _a;\n\n    options.headers = (_a = options.headers) !== null && _a !== void 0 ? _a : {};\n\n    if (typeof body === 'string') {\n      options.headers['content-length'] = Buffer.byteLength(body);\n    } else {\n      options.headers['content-length'] = body.length;\n    }\n  }\n\n  static isOAuthSerializable(item) {\n    return !(item instanceof Buffer);\n  }\n\n  static mergeQueryAndBodyForOAuth(query, body) {\n    const parameters = {};\n\n    for (const prop in query) {\n      parameters[prop] = query[prop];\n    }\n\n    if (this.isOAuthSerializable(body)) {\n      for (const prop in body) {\n        const bodyProp = body[prop];\n\n        if (this.isOAuthSerializable(bodyProp)) {\n          parameters[prop] = typeof bodyProp === 'object' && bodyProp !== null && 'toString' in bodyProp ? bodyProp.toString() : bodyProp;\n        }\n      }\n    }\n\n    return parameters;\n  }\n\n  static moveUrlQueryParamsIntoObject(url, query) {\n    for (const [param, value] of url.searchParams) {\n      query[param] = value;\n    } // Remove the query string\n\n\n    url.search = '';\n    return url;\n  }\n  /**\n   * Replace URL parameters available in pathname, like `:id`, with data given in `parameters`:\n   * `https://twitter.com/:id.json` + `{ id: '20' }` => `https://twitter.com/20.json`\n   */\n\n\n  static applyRequestParametersToUrl(url, parameters) {\n    url.pathname = url.pathname.replace(/:([A-Z_-]+)/ig, (fullMatch, paramName) => {\n      if (parameters[paramName] !== undefined) {\n        return String(parameters[paramName]);\n      }\n\n      return fullMatch;\n    });\n    return url;\n  }\n\n}\n\nexports.RequestParamHelpers = RequestParamHelpers;\nRequestParamHelpers.JSON_1_1_ENDPOINTS = new Set(['direct_messages/events/new.json', 'direct_messages/welcome_messages/new.json', 'direct_messages/welcome_messages/rules/new.json', 'media/metadata/create.json', 'collections/entries/curate.json']);\nexports.default = RequestParamHelpers;","map":{"version":3,"sources":["/Users/tarungunampalli/Documents/twitter-oauth/node_modules/twitter-api-v2/dist/client-mixins/request-param.helper.js"],"names":["Object","defineProperty","exports","value","RequestParamHelpers","form_data_helper_1","require","formatQueryToString","query","formattedQuery","prop","String","autoDetectBodyType","url","pathname","startsWith","password","hostname","endpoint","split","JSON_1_1_ENDPOINTS","has","addQueryParamsToUrl","key","entries","searchParams","append","search","replace","constructBodyParams","body","headers","mode","Buffer","JSON","stringify","keys","length","URLSearchParams","toString","Error","form","FormDataHelper","parameter","formHeaders","getHeaders","getBuffer","setBodyLengthHeader","options","_a","byteLength","isOAuthSerializable","item","mergeQueryAndBodyForOAuth","parameters","bodyProp","moveUrlQueryParamsIntoObject","param","applyRequestParametersToUrl","fullMatch","paramName","undefined","Set","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RequestParamHelpers = void 0;\nconst form_data_helper_1 = require(\"./form-data.helper\");\n/* Helpers functions that are specific to this class but do not depends on instance */\nclass RequestParamHelpers {\n    static formatQueryToString(query) {\n        const formattedQuery = {};\n        for (const prop in query) {\n            if (typeof query[prop] === 'string') {\n                formattedQuery[prop] = query[prop];\n            }\n            else if (typeof query[prop] !== 'undefined') {\n                formattedQuery[prop] = String(query[prop]);\n            }\n        }\n        return formattedQuery;\n    }\n    static autoDetectBodyType(url) {\n        if (url.pathname.startsWith('/2/') || url.pathname.startsWith('/labs/2/')) {\n            // oauth2 takes url encoded\n            if (url.password.startsWith('/2/oauth2')) {\n                return 'url';\n            }\n            // Twitter API v2 has JSON-encoded requests for everything else\n            return 'json';\n        }\n        if (url.hostname === 'upload.twitter.com') {\n            if (url.pathname === '/1.1/media/upload.json') {\n                return 'form-data';\n            }\n            // json except for media/upload command, that is form-data.\n            return 'json';\n        }\n        const endpoint = url.pathname.split('/1.1/', 2)[1];\n        if (this.JSON_1_1_ENDPOINTS.has(endpoint)) {\n            return 'json';\n        }\n        return 'url';\n    }\n    static addQueryParamsToUrl(url, query) {\n        for (const [key, value] of Object.entries(query)) {\n            url.searchParams.append(key, value);\n        }\n        if (url.search) {\n            // URLSearchParams doesnt encode '*', but Twitter wants it encoded.\n            url.search = url.search.replace(/\\*/g, '%2A');\n        }\n    }\n    static constructBodyParams(body, headers, mode) {\n        if (body instanceof Buffer) {\n            return body;\n        }\n        if (mode === 'json') {\n            headers['content-type'] = 'application/json;charset=UTF-8';\n            return JSON.stringify(body);\n        }\n        else if (mode === 'url') {\n            headers['content-type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\n            if (Object.keys(body).length) {\n                return new URLSearchParams(body)\n                    .toString()\n                    .replace(/\\*/g, '%2A'); // URLSearchParams doesnt encode '*', but Twitter wants it encoded.\n            }\n            return '';\n        }\n        else if (mode === 'raw') {\n            throw new Error('You can only use raw body mode with Buffers. To give a string, use Buffer.from(str).');\n        }\n        else {\n            const form = new form_data_helper_1.FormDataHelper();\n            for (const parameter in body) {\n                form.append(parameter, body[parameter]);\n            }\n            const formHeaders = form.getHeaders();\n            headers['content-type'] = formHeaders['content-type'];\n            return form.getBuffer();\n        }\n    }\n    static setBodyLengthHeader(options, body) {\n        var _a;\n        options.headers = (_a = options.headers) !== null && _a !== void 0 ? _a : {};\n        if (typeof body === 'string') {\n            options.headers['content-length'] = Buffer.byteLength(body);\n        }\n        else {\n            options.headers['content-length'] = body.length;\n        }\n    }\n    static isOAuthSerializable(item) {\n        return !(item instanceof Buffer);\n    }\n    static mergeQueryAndBodyForOAuth(query, body) {\n        const parameters = {};\n        for (const prop in query) {\n            parameters[prop] = query[prop];\n        }\n        if (this.isOAuthSerializable(body)) {\n            for (const prop in body) {\n                const bodyProp = body[prop];\n                if (this.isOAuthSerializable(bodyProp)) {\n                    parameters[prop] = typeof bodyProp === 'object' && bodyProp !== null && 'toString' in bodyProp\n                        ? bodyProp.toString()\n                        : bodyProp;\n                }\n            }\n        }\n        return parameters;\n    }\n    static moveUrlQueryParamsIntoObject(url, query) {\n        for (const [param, value] of url.searchParams) {\n            query[param] = value;\n        }\n        // Remove the query string\n        url.search = '';\n        return url;\n    }\n    /**\n     * Replace URL parameters available in pathname, like `:id`, with data given in `parameters`:\n     * `https://twitter.com/:id.json` + `{ id: '20' }` => `https://twitter.com/20.json`\n     */\n    static applyRequestParametersToUrl(url, parameters) {\n        url.pathname = url.pathname.replace(/:([A-Z_-]+)/ig, (fullMatch, paramName) => {\n            if (parameters[paramName] !== undefined) {\n                return String(parameters[paramName]);\n            }\n            return fullMatch;\n        });\n        return url;\n    }\n}\nexports.RequestParamHelpers = RequestParamHelpers;\nRequestParamHelpers.JSON_1_1_ENDPOINTS = new Set([\n    'direct_messages/events/new.json',\n    'direct_messages/welcome_messages/new.json',\n    'direct_messages/welcome_messages/rules/new.json',\n    'media/metadata/create.json',\n    'collections/entries/curate.json',\n]);\nexports.default = RequestParamHelpers;\n"]},"metadata":{},"sourceType":"script"}