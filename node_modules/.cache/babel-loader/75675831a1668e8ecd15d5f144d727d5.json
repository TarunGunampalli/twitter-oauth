{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst client_subclient_1 = __importDefault(require(\"../client.subclient\"));\n\nconst globals_1 = require(\"../globals\");\n\nconst helpers_1 = require(\"../helpers\");\n\nconst client_v1_1 = __importDefault(require(\"../v1/client.v1\"));\n\nconst tweet_paginator_v1_1 = require(\"../paginators/tweet.paginator.v1\");\n\nconst mutes_paginator_v1_1 = require(\"../paginators/mutes.paginator.v1\");\n\nconst user_paginator_v1_1 = require(\"../paginators/user.paginator.v1\");\n\nconst list_paginator_v1_1 = require(\"../paginators/list.paginator.v1\");\n/**\n * Base Twitter v1 client with only read right.\n */\n\n\nclass TwitterApiv1ReadOnly extends client_subclient_1.default {\n  constructor() {\n    super(...arguments);\n    this._prefix = globals_1.API_V1_1_PREFIX;\n  }\n  /* Tweets */\n\n  /**\n   * Returns a single Tweet, specified by the id parameter. The Tweet's author will also be embedded within the Tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-show-id\n   */\n\n\n  singleTweet(tweetId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('statuses/show.json', {\n      tweet_mode: 'extended',\n      id: tweetId,\n      ...options\n    });\n  }\n\n  tweets(ids) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.post('statuses/lookup.json', {\n      tweet_mode: 'extended',\n      id: ids,\n      ...options\n    });\n  }\n  /**\n   * Returns a single Tweet, specified by either a Tweet web URL or the Tweet ID, in an oEmbed-compatible format.\n   * The returned HTML snippet will be automatically recognized as an Embedded Tweet when Twitter's widget JavaScript is included on the page.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-oembed\n   */\n\n\n  oembedTweet(tweetId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('oembed', {\n      url: `https://twitter.com/i/statuses/${tweetId}`,\n      ...options\n    }, {\n      prefix: 'https://publish.twitter.com/'\n    });\n  }\n  /* Tweets timelines */\n\n  /**\n   * Returns a collection of the most recent Tweets and Retweets posted by the authenticating user and the users they follow.\n   * The home timeline is central to how most users interact with the Twitter service.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-home_timeline\n   */\n\n\n  async homeTimeline() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('statuses/home_timeline.json', queryParams, {\n      fullResponse: true\n    });\n    return new tweet_paginator_v1_1.HomeTimelineV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns the 20 most recent mentions (Tweets containing a users's @screen_name) for the authenticating user.\n   * The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline\n   */\n\n\n  async mentionTimeline() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('statuses/mentions_timeline.json', queryParams, {\n      fullResponse: true\n    });\n    return new tweet_paginator_v1_1.MentionTimelineV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns a collection of the most recent Tweets posted by the user indicated by the user_id parameters.\n   * User timelines belonging to protected users may only be requested when the authenticated user either \"owns\" the timeline or is an approved follower of the owner.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-user_timeline\n   */\n\n\n  async userTimeline(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      user_id: userId,\n      ...options\n    };\n    const initialRq = await this.get('statuses/user_timeline.json', queryParams, {\n      fullResponse: true\n    });\n    return new tweet_paginator_v1_1.UserTimelineV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns a collection of the most recent Tweets posted by the user indicated by the screen_name parameters.\n   * User timelines belonging to protected users may only be requested when the authenticated user either \"owns\" the timeline or is an approved follower of the owner.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-user_timeline\n   */\n\n\n  async userTimelineByUsername(username) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      screen_name: username,\n      ...options\n    };\n    const initialRq = await this.get('statuses/user_timeline.json', queryParams, {\n      fullResponse: true\n    });\n    return new tweet_paginator_v1_1.UserTimelineV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /* Users */\n\n  /**\n   * Returns a variety of information about the user specified by the required user_id or screen_name parameter.\n   * The author's most recent Tweet will be returned inline when possible.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show\n   */\n\n\n  user(user) {\n    return this.get('users/show.json', {\n      tweet_mode: 'extended',\n      ...user\n    });\n  }\n  /**\n   * Returns fully-hydrated user objects for up to 100 users per request,\n   * as specified by comma-separated values passed to the user_id and/or screen_name parameters.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup\n   */\n\n\n  users(query) {\n    return this.get('users/lookup.json', {\n      tweet_mode: 'extended',\n      ...query\n    });\n  }\n  /**\n   * Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful;\n   * returns a 401 status code and an error message if not.\n   * Use this method to test if supplied user credentials are valid.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-verify_credentials\n   */\n\n\n  verifyCredentials() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.get('account/verify_credentials.json', options);\n  }\n  /**\n   * Returns an array of user objects the authenticating user has muted.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-list\n   */\n\n\n  async listMutedUsers() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('mutes/users/list.json', queryParams, {\n      fullResponse: true\n    });\n    return new mutes_paginator_v1_1.MuteUserListV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns an array of numeric user ids the authenticating user has muted.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-ids\n   */\n\n\n  async listMutedUserIds() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      stringify_ids: true,\n      ...options\n    };\n    const initialRq = await this.get('mutes/users/ids.json', queryParams, {\n      fullResponse: true\n    });\n    return new mutes_paginator_v1_1.MuteUserIdsV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Provides a simple, relevance-based search interface to public user accounts on Twitter.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-search\n   */\n\n\n  async searchUsers(query) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const queryParams = {\n      q: query,\n      tweet_mode: 'extended',\n      page: 1,\n      ...options\n    };\n    const initialRq = await this.get('users/search.json', queryParams, {\n      fullResponse: true\n    });\n    return new user_paginator_v1_1.UserSearchV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /* Friendship API */\n\n  /**\n   * Returns detailed information about the relationship between two arbitrary users.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show\n   */\n\n\n  friendship(sources) {\n    return this.get('friendships/show.json', sources);\n  }\n  /**\n   * Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-lookup\n   */\n\n\n  friendships(friendships) {\n    return this.get('friendships/lookup.json', friendships);\n  }\n  /**\n   * Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-no_retweets-ids\n   */\n\n\n  friendshipsNoRetweets() {\n    return this.get('friendships/no_retweets/ids.json', {\n      stringify_ids: true\n    });\n  }\n  /**\n   * Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-incoming\n   */\n\n\n  async friendshipsIncoming() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      stringify_ids: true,\n      ...options\n    };\n    const initialRq = await this.get('friendships/incoming.json', queryParams, {\n      fullResponse: true\n    });\n    return new user_paginator_v1_1.FriendshipsIncomingV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-outgoing\n   */\n\n\n  async friendshipsOutgoing() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      stringify_ids: true,\n      ...options\n    };\n    const initialRq = await this.get('friendships/outgoing.json', queryParams, {\n      fullResponse: true\n    });\n    return new user_paginator_v1_1.FriendshipsOutgoingV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /* Account/user API */\n\n  /**\n   * Get current account settings for authenticating user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-settings\n   */\n\n\n  accountSettings() {\n    return this.get('account/settings.json');\n  }\n  /**\n   * Returns a map of the available size variations of the specified user's profile banner.\n   * If the user has not uploaded a profile banner, a HTTP 404 will be served instead.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-users-profile_banner\n   */\n\n\n  userProfileBannerSizes(params) {\n    return this.get('users/profile_banner.json', params);\n  }\n  /* Lists */\n\n  /**\n   * Returns the specified list. Private lists will only be shown if the authenticated user owns the specified list.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-show\n   */\n\n\n  list(options) {\n    return this.get('lists/show.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Returns all lists the authenticating or specified user subscribes to, including their own.\n   * If no user is given, the authenticating user is used.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list\n   */\n\n\n  lists() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.get('lists/list.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Returns the members of the specified list. Private list members will only be shown if the authenticated user owns the specified list.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members\n   */\n\n\n  async listMembers() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('lists/members.json', queryParams, {\n      fullResponse: true\n    });\n    return new list_paginator_v1_1.ListMembersV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Check if the specified user is a member of the specified list.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members-show\n   */\n\n\n  listGetMember(options) {\n    return this.get('lists/members/show.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Returns the lists the specified user has been added to.\n   * If user_id or screen_name are not provided, the memberships for the authenticating user are returned.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-memberships\n   */\n\n\n  async listMemberships() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('lists/memberships.json', queryParams, {\n      fullResponse: true\n    });\n    return new list_paginator_v1_1.ListMembershipsV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns the lists owned by the specified Twitter user. Private lists will only be shown if the authenticated user is also the owner of the lists.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-ownerships\n   */\n\n\n  async listOwnerships() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('lists/ownerships.json', queryParams, {\n      fullResponse: true\n    });\n    return new list_paginator_v1_1.ListOwnershipsV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns a timeline of tweets authored by members of the specified list. Retweets are included by default.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-statuses\n   */\n\n\n  async listStatuses(options) {\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('lists/statuses.json', queryParams, {\n      fullResponse: true\n    });\n    return new tweet_paginator_v1_1.ListTimelineV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns the subscribers of the specified list. Private list subscribers will only be shown if the authenticated user owns the specified list.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers\n   */\n\n\n  async listSubscribers() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('lists/subscribers.json', queryParams, {\n      fullResponse: true\n    });\n    return new list_paginator_v1_1.ListSubscribersV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Check if the specified user is a subscriber of the specified list. Returns the user if they are a subscriber.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers-show\n   */\n\n\n  listGetSubscriber(options) {\n    return this.get('lists/subscribers/show.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default.\n   * Does not include the user's own lists.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscriptions\n   */\n\n\n  async listSubscriptions() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('lists/subscriptions.json', queryParams, {\n      fullResponse: true\n    });\n    return new list_paginator_v1_1.ListSubscriptionsV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /* Media upload API */\n\n  /**\n   * The STATUS command (this method) is used to periodically poll for updates of media processing operation.\n   * After the STATUS command response returns succeeded, you can move on to the next step which is usually create Tweet with media_id.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/get-media-upload-status\n   */\n\n\n  mediaInfo(mediaId) {\n    return this.get('media/upload.json', {\n      command: 'STATUS',\n      media_id: mediaId\n    }, {\n      prefix: globals_1.API_V1_1_UPLOAD_PREFIX\n    });\n  }\n\n  filterStream() {\n    let {\n      autoConnect,\n      ...params\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const parameters = {};\n\n    for (const [key, value] of Object.entries(params)) {\n      if (key === 'follow' || key === 'track') {\n        parameters[key] = value.toString();\n      } else if (key === 'locations') {\n        const locations = value;\n        parameters.locations = helpers_1.arrayWrap(locations).map(loc => `${loc.lng},${loc.lat}`).join(',');\n      } else {\n        parameters[key] = value;\n      }\n    }\n\n    const streamClient = this.stream;\n    return streamClient.postStream('statuses/filter.json', parameters, {\n      autoConnect\n    });\n  }\n\n  sampleStream() {\n    let {\n      autoConnect,\n      ...params\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const streamClient = this.stream;\n    return streamClient.getStream('statuses/sample.json', params, {\n      autoConnect\n    });\n  }\n  /**\n   * Create a client that is prefixed with `https//stream.twitter.com` instead of classic API URL.\n   */\n\n\n  get stream() {\n    const copiedClient = new client_v1_1.default(this);\n    copiedClient.setPrefix(globals_1.API_V1_1_STREAM_PREFIX);\n    return copiedClient;\n  }\n  /* Trends API */\n\n  /**\n   * Returns the top 50 trending topics for a specific id, if trending information is available for it.\n   * Note: The id parameter for this endpoint is the \"where on earth identifier\" or WOEID, which is a legacy identifier created by Yahoo and has been deprecated.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place\n   */\n\n\n  trendsByPlace(woeId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('trends/place.json', {\n      id: woeId,\n      ...options\n    });\n  }\n  /**\n   * Returns the locations that Twitter has trending topic information for.\n   * The response is an array of \"locations\" that encode the location's WOEID\n   * and some other human-readable information such as a canonical name and country the location belongs in.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/trends/locations-with-trending-topics/api-reference/get-trends-available\n   */\n\n\n  trendsAvailable() {\n    return this.get('trends/available.json');\n  }\n  /**\n   * Returns the locations that Twitter has trending topic information for, closest to a specified location.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/trends/locations-with-trending-topics/api-reference/get-trends-closest\n   */\n\n\n  trendsClosest(lat, long) {\n    return this.get('trends/closest.json', {\n      lat,\n      long\n    });\n  }\n  /* Geo API */\n\n  /**\n   * Returns all the information about a known place.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/geo/place-information/api-reference/get-geo-id-place_id\n   */\n\n\n  geoPlace(placeId) {\n    return this.get('geo/id/:place_id.json', undefined, {\n      params: {\n        place_id: placeId\n      }\n    });\n  }\n  /**\n   * Search for places that can be attached to a Tweet via POST statuses/update.\n   * This request will return a list of all the valid places that can be used as the place_id when updating a status.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/geo/places-near-location/api-reference/get-geo-search\n   */\n\n\n  geoSearch(options) {\n    return this.get('geo/search.json', options);\n  }\n  /**\n   * Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.\n   * This request is an informative call and will deliver generalized results about geography.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/geo/places-near-location/api-reference/get-geo-reverse_geocode\n   */\n\n\n  geoReverseGeoCode(options) {\n    return this.get('geo/reverse_geocode.json', options);\n  }\n  /* Developer utilities */\n\n  /**\n   * Returns the current rate limits for methods belonging to the specified resource families.\n   * Each API resource belongs to a \"resource family\" which is indicated in its method documentation.\n   * The method's resource family can be determined from the first component of the path after the resource version.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/developer-utilities/rate-limit-status/api-reference/get-application-rate_limit_status\n   */\n\n\n  rateLimitStatuses() {\n    for (var _len = arguments.length, resources = new Array(_len), _key = 0; _key < _len; _key++) {\n      resources[_key] = arguments[_key];\n    }\n\n    return this.get('application/rate_limit_status.json', {\n      resources\n    });\n  }\n  /**\n   * Returns the list of languages supported by Twitter along with the language code supported by Twitter.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/developer-utilities/supported-languages/api-reference/get-help-languages\n   */\n\n\n  supportedLanguages() {\n    return this.get('help/languages.json');\n  }\n\n}\n\nexports.default = TwitterApiv1ReadOnly;","map":{"version":3,"sources":["/Users/tarungunampalli/Documents/twitter-oauth/node_modules/twitter-api-v2/dist/v1/client.v1.read.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","client_subclient_1","require","globals_1","helpers_1","client_v1_1","tweet_paginator_v1_1","mutes_paginator_v1_1","user_paginator_v1_1","list_paginator_v1_1","TwitterApiv1ReadOnly","default","constructor","arguments","_prefix","API_V1_1_PREFIX","singleTweet","tweetId","options","get","tweet_mode","id","tweets","ids","post","oembedTweet","url","prefix","homeTimeline","queryParams","initialRq","fullResponse","HomeTimelineV1Paginator","realData","data","rateLimit","instance","mentionTimeline","MentionTimelineV1Paginator","userTimeline","userId","user_id","UserTimelineV1Paginator","userTimelineByUsername","username","screen_name","user","users","query","verifyCredentials","listMutedUsers","MuteUserListV1Paginator","listMutedUserIds","stringify_ids","MuteUserIdsV1Paginator","searchUsers","q","page","UserSearchV1Paginator","friendship","sources","friendships","friendshipsNoRetweets","friendshipsIncoming","FriendshipsIncomingV1Paginator","friendshipsOutgoing","FriendshipsOutgoingV1Paginator","accountSettings","userProfileBannerSizes","params","list","lists","listMembers","ListMembersV1Paginator","listGetMember","listMemberships","ListMembershipsV1Paginator","listOwnerships","ListOwnershipsV1Paginator","listStatuses","ListTimelineV1Paginator","listSubscribers","ListSubscribersV1Paginator","listGetSubscriber","listSubscriptions","ListSubscriptionsV1Paginator","mediaInfo","mediaId","command","media_id","API_V1_1_UPLOAD_PREFIX","filterStream","autoConnect","parameters","key","entries","toString","locations","arrayWrap","map","loc","lng","lat","join","streamClient","stream","postStream","sampleStream","getStream","copiedClient","setPrefix","API_V1_1_STREAM_PREFIX","trendsByPlace","woeId","trendsAvailable","trendsClosest","long","geoPlace","placeId","undefined","place_id","geoSearch","geoReverseGeoCode","rateLimitStatuses","resources","supportedLanguages"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_subclient_1 = __importDefault(require(\"../client.subclient\"));\nconst globals_1 = require(\"../globals\");\nconst helpers_1 = require(\"../helpers\");\nconst client_v1_1 = __importDefault(require(\"../v1/client.v1\"));\nconst tweet_paginator_v1_1 = require(\"../paginators/tweet.paginator.v1\");\nconst mutes_paginator_v1_1 = require(\"../paginators/mutes.paginator.v1\");\nconst user_paginator_v1_1 = require(\"../paginators/user.paginator.v1\");\nconst list_paginator_v1_1 = require(\"../paginators/list.paginator.v1\");\n/**\n * Base Twitter v1 client with only read right.\n */\nclass TwitterApiv1ReadOnly extends client_subclient_1.default {\n    constructor() {\n        super(...arguments);\n        this._prefix = globals_1.API_V1_1_PREFIX;\n    }\n    /* Tweets */\n    /**\n     * Returns a single Tweet, specified by the id parameter. The Tweet's author will also be embedded within the Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-show-id\n     */\n    singleTweet(tweetId, options = {}) {\n        return this.get('statuses/show.json', { tweet_mode: 'extended', id: tweetId, ...options });\n    }\n    tweets(ids, options = {}) {\n        return this.post('statuses/lookup.json', { tweet_mode: 'extended', id: ids, ...options });\n    }\n    /**\n     * Returns a single Tweet, specified by either a Tweet web URL or the Tweet ID, in an oEmbed-compatible format.\n     * The returned HTML snippet will be automatically recognized as an Embedded Tweet when Twitter's widget JavaScript is included on the page.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-oembed\n     */\n    oembedTweet(tweetId, options = {}) {\n        return this.get('oembed', {\n            url: `https://twitter.com/i/statuses/${tweetId}`,\n            ...options,\n        }, { prefix: 'https://publish.twitter.com/' });\n    }\n    /* Tweets timelines */\n    /**\n     * Returns a collection of the most recent Tweets and Retweets posted by the authenticating user and the users they follow.\n     * The home timeline is central to how most users interact with the Twitter service.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-home_timeline\n     */\n    async homeTimeline(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('statuses/home_timeline.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.HomeTimelineV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns the 20 most recent mentions (Tweets containing a users's @screen_name) for the authenticating user.\n     * The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline\n     */\n    async mentionTimeline(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('statuses/mentions_timeline.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.MentionTimelineV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns a collection of the most recent Tweets posted by the user indicated by the user_id parameters.\n     * User timelines belonging to protected users may only be requested when the authenticated user either \"owns\" the timeline or is an approved follower of the owner.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-user_timeline\n     */\n    async userTimeline(userId, options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            user_id: userId,\n            ...options,\n        };\n        const initialRq = await this.get('statuses/user_timeline.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.UserTimelineV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns a collection of the most recent Tweets posted by the user indicated by the screen_name parameters.\n     * User timelines belonging to protected users may only be requested when the authenticated user either \"owns\" the timeline or is an approved follower of the owner.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-user_timeline\n     */\n    async userTimelineByUsername(username, options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            screen_name: username,\n            ...options,\n        };\n        const initialRq = await this.get('statuses/user_timeline.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.UserTimelineV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /* Users */\n    /**\n     * Returns a variety of information about the user specified by the required user_id or screen_name parameter.\n     * The author's most recent Tweet will be returned inline when possible.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show\n     */\n    user(user) {\n        return this.get('users/show.json', { tweet_mode: 'extended', ...user });\n    }\n    /**\n     * Returns fully-hydrated user objects for up to 100 users per request,\n     * as specified by comma-separated values passed to the user_id and/or screen_name parameters.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup\n     */\n    users(query) {\n        return this.get('users/lookup.json', { tweet_mode: 'extended', ...query });\n    }\n    /**\n     * Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful;\n     * returns a 401 status code and an error message if not.\n     * Use this method to test if supplied user credentials are valid.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-verify_credentials\n     */\n    verifyCredentials(options = {}) {\n        return this.get('account/verify_credentials.json', options);\n    }\n    /**\n     * Returns an array of user objects the authenticating user has muted.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-list\n     */\n    async listMutedUsers(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('mutes/users/list.json', queryParams, { fullResponse: true });\n        return new mutes_paginator_v1_1.MuteUserListV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns an array of numeric user ids the authenticating user has muted.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-ids\n     */\n    async listMutedUserIds(options = {}) {\n        const queryParams = {\n            stringify_ids: true,\n            ...options,\n        };\n        const initialRq = await this.get('mutes/users/ids.json', queryParams, { fullResponse: true });\n        return new mutes_paginator_v1_1.MuteUserIdsV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Provides a simple, relevance-based search interface to public user accounts on Twitter.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-search\n     */\n    async searchUsers(query, options = {}) {\n        const queryParams = {\n            q: query,\n            tweet_mode: 'extended',\n            page: 1,\n            ...options,\n        };\n        const initialRq = await this.get('users/search.json', queryParams, { fullResponse: true });\n        return new user_paginator_v1_1.UserSearchV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /* Friendship API */\n    /**\n     * Returns detailed information about the relationship between two arbitrary users.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show\n     */\n    friendship(sources) {\n        return this.get('friendships/show.json', sources);\n    }\n    /**\n     * Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-lookup\n     */\n    friendships(friendships) {\n        return this.get('friendships/lookup.json', friendships);\n    }\n    /**\n     * Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-no_retweets-ids\n     */\n    friendshipsNoRetweets() {\n        return this.get('friendships/no_retweets/ids.json', { stringify_ids: true });\n    }\n    /**\n     * Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-incoming\n     */\n    async friendshipsIncoming(options = {}) {\n        const queryParams = {\n            stringify_ids: true,\n            ...options,\n        };\n        const initialRq = await this.get('friendships/incoming.json', queryParams, { fullResponse: true });\n        return new user_paginator_v1_1.FriendshipsIncomingV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-outgoing\n     */\n    async friendshipsOutgoing(options = {}) {\n        const queryParams = {\n            stringify_ids: true,\n            ...options,\n        };\n        const initialRq = await this.get('friendships/outgoing.json', queryParams, { fullResponse: true });\n        return new user_paginator_v1_1.FriendshipsOutgoingV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /* Account/user API */\n    /**\n     * Get current account settings for authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-settings\n     */\n    accountSettings() {\n        return this.get('account/settings.json');\n    }\n    /**\n     * Returns a map of the available size variations of the specified user's profile banner.\n     * If the user has not uploaded a profile banner, a HTTP 404 will be served instead.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-users-profile_banner\n     */\n    userProfileBannerSizes(params) {\n        return this.get('users/profile_banner.json', params);\n    }\n    /* Lists */\n    /**\n     * Returns the specified list. Private lists will only be shown if the authenticated user owns the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-show\n     */\n    list(options) {\n        return this.get('lists/show.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Returns all lists the authenticating or specified user subscribes to, including their own.\n     * If no user is given, the authenticating user is used.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list\n     */\n    lists(options = {}) {\n        return this.get('lists/list.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Returns the members of the specified list. Private list members will only be shown if the authenticated user owns the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members\n     */\n    async listMembers(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('lists/members.json', queryParams, { fullResponse: true });\n        return new list_paginator_v1_1.ListMembersV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Check if the specified user is a member of the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members-show\n     */\n    listGetMember(options) {\n        return this.get('lists/members/show.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Returns the lists the specified user has been added to.\n     * If user_id or screen_name are not provided, the memberships for the authenticating user are returned.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-memberships\n     */\n    async listMemberships(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('lists/memberships.json', queryParams, { fullResponse: true });\n        return new list_paginator_v1_1.ListMembershipsV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns the lists owned by the specified Twitter user. Private lists will only be shown if the authenticated user is also the owner of the lists.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-ownerships\n     */\n    async listOwnerships(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('lists/ownerships.json', queryParams, { fullResponse: true });\n        return new list_paginator_v1_1.ListOwnershipsV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns a timeline of tweets authored by members of the specified list. Retweets are included by default.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-statuses\n     */\n    async listStatuses(options) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('lists/statuses.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.ListTimelineV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns the subscribers of the specified list. Private list subscribers will only be shown if the authenticated user owns the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers\n     */\n    async listSubscribers(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('lists/subscribers.json', queryParams, { fullResponse: true });\n        return new list_paginator_v1_1.ListSubscribersV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Check if the specified user is a subscriber of the specified list. Returns the user if they are a subscriber.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers-show\n     */\n    listGetSubscriber(options) {\n        return this.get('lists/subscribers/show.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default.\n     * Does not include the user's own lists.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscriptions\n     */\n    async listSubscriptions(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('lists/subscriptions.json', queryParams, { fullResponse: true });\n        return new list_paginator_v1_1.ListSubscriptionsV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /* Media upload API */\n    /**\n     * The STATUS command (this method) is used to periodically poll for updates of media processing operation.\n     * After the STATUS command response returns succeeded, you can move on to the next step which is usually create Tweet with media_id.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/get-media-upload-status\n     */\n    mediaInfo(mediaId) {\n        return this.get('media/upload.json', {\n            command: 'STATUS',\n            media_id: mediaId,\n        }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX });\n    }\n    filterStream({ autoConnect, ...params } = {}) {\n        const parameters = {};\n        for (const [key, value] of Object.entries(params)) {\n            if (key === 'follow' || key === 'track') {\n                parameters[key] = value.toString();\n            }\n            else if (key === 'locations') {\n                const locations = value;\n                parameters.locations = helpers_1.arrayWrap(locations).map(loc => `${loc.lng},${loc.lat}`).join(',');\n            }\n            else {\n                parameters[key] = value;\n            }\n        }\n        const streamClient = this.stream;\n        return streamClient.postStream('statuses/filter.json', parameters, { autoConnect });\n    }\n    sampleStream({ autoConnect, ...params } = {}) {\n        const streamClient = this.stream;\n        return streamClient.getStream('statuses/sample.json', params, { autoConnect });\n    }\n    /**\n     * Create a client that is prefixed with `https//stream.twitter.com` instead of classic API URL.\n     */\n    get stream() {\n        const copiedClient = new client_v1_1.default(this);\n        copiedClient.setPrefix(globals_1.API_V1_1_STREAM_PREFIX);\n        return copiedClient;\n    }\n    /* Trends API */\n    /**\n     * Returns the top 50 trending topics for a specific id, if trending information is available for it.\n     * Note: The id parameter for this endpoint is the \"where on earth identifier\" or WOEID, which is a legacy identifier created by Yahoo and has been deprecated.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place\n     */\n    trendsByPlace(woeId, options = {}) {\n        return this.get('trends/place.json', { id: woeId, ...options });\n    }\n    /**\n     * Returns the locations that Twitter has trending topic information for.\n     * The response is an array of \"locations\" that encode the location's WOEID\n     * and some other human-readable information such as a canonical name and country the location belongs in.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/trends/locations-with-trending-topics/api-reference/get-trends-available\n     */\n    trendsAvailable() {\n        return this.get('trends/available.json');\n    }\n    /**\n     * Returns the locations that Twitter has trending topic information for, closest to a specified location.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/trends/locations-with-trending-topics/api-reference/get-trends-closest\n     */\n    trendsClosest(lat, long) {\n        return this.get('trends/closest.json', { lat, long });\n    }\n    /* Geo API */\n    /**\n     * Returns all the information about a known place.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/geo/place-information/api-reference/get-geo-id-place_id\n     */\n    geoPlace(placeId) {\n        return this.get('geo/id/:place_id.json', undefined, { params: { place_id: placeId } });\n    }\n    /**\n     * Search for places that can be attached to a Tweet via POST statuses/update.\n     * This request will return a list of all the valid places that can be used as the place_id when updating a status.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/geo/places-near-location/api-reference/get-geo-search\n     */\n    geoSearch(options) {\n        return this.get('geo/search.json', options);\n    }\n    /**\n     * Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.\n     * This request is an informative call and will deliver generalized results about geography.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/geo/places-near-location/api-reference/get-geo-reverse_geocode\n     */\n    geoReverseGeoCode(options) {\n        return this.get('geo/reverse_geocode.json', options);\n    }\n    /* Developer utilities */\n    /**\n     * Returns the current rate limits for methods belonging to the specified resource families.\n     * Each API resource belongs to a \"resource family\" which is indicated in its method documentation.\n     * The method's resource family can be determined from the first component of the path after the resource version.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/developer-utilities/rate-limit-status/api-reference/get-application-rate_limit_status\n     */\n    rateLimitStatuses(...resources) {\n        return this.get('application/rate_limit_status.json', { resources });\n    }\n    /**\n     * Returns the list of languages supported by Twitter along with the language code supported by Twitter.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/developer-utilities/supported-languages/api-reference/get-help-languages\n     */\n    supportedLanguages() {\n        return this.get('help/languages.json');\n    }\n}\nexports.default = TwitterApiv1ReadOnly;\n"]},"metadata":{},"sourceType":"script"}