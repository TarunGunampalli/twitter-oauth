{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ClientRequestMaker = void 0;\n\nconst TweetStream_1 = __importDefault(require(\"../stream/TweetStream\"));\n\nconst helpers_1 = require(\"../helpers\");\n\nconst oauth1_helper_1 = __importDefault(require(\"./oauth1.helper\"));\n\nconst request_handler_helper_1 = __importDefault(require(\"./request-handler.helper\"));\n\nconst request_param_helper_1 = __importDefault(require(\"./request-param.helper\"));\n\nconst oauth2_helper_1 = require(\"./oauth2.helper\");\n\nclass ClientRequestMaker {\n  constructor() {\n    this._rateLimits = {};\n  }\n\n  saveRateLimit(originalUrl, rateLimit) {\n    this._rateLimits[originalUrl] = rateLimit;\n  }\n  /** Send a new request and returns a wrapped `Promise<TwitterResponse<T>`. */\n\n\n  send(requestParams) {\n    const args = this.getHttpRequestArgs(requestParams);\n    const options = {\n      method: args.method,\n      headers: args.headers,\n      timeout: requestParams.timeout\n    };\n    const enableRateLimitSave = requestParams.enableRateLimitSave !== false;\n\n    if (args.body) {\n      request_param_helper_1.default.setBodyLengthHeader(options, args.body);\n    }\n\n    return new request_handler_helper_1.default({\n      url: args.url,\n      options,\n      body: args.body,\n      rateLimitSaver: enableRateLimitSave ? this.saveRateLimit.bind(this, args.rawUrl) : undefined\n    }).makeRequest();\n  }\n\n  sendStream(requestParams) {\n    const args = this.getHttpRequestArgs(requestParams);\n    const options = {\n      method: args.method,\n      headers: args.headers\n    };\n    const enableRateLimitSave = requestParams.enableRateLimitSave !== false;\n    const enableAutoConnect = requestParams.autoConnect !== false;\n\n    if (args.body) {\n      request_param_helper_1.default.setBodyLengthHeader(options, args.body);\n    }\n\n    const requestData = {\n      url: args.url,\n      options,\n      body: args.body,\n      rateLimitSaver: enableRateLimitSave ? this.saveRateLimit.bind(this, args.rawUrl) : undefined,\n      payloadIsError: requestParams.payloadIsError\n    };\n    const stream = new TweetStream_1.default(requestData);\n\n    if (!enableAutoConnect) {\n      return stream;\n    }\n\n    return stream.connect();\n  }\n  /* Token helpers */\n\n\n  buildOAuth() {\n    if (!this._consumerSecret || !this._consumerToken) throw new Error('Invalid consumer tokens');\n    return new oauth1_helper_1.default({\n      consumerKeys: {\n        key: this._consumerToken,\n        secret: this._consumerSecret\n      }\n    });\n  }\n\n  getOAuthAccessTokens() {\n    if (!this._accessSecret || !this._accessToken) return;\n    return {\n      key: this._accessToken,\n      secret: this._accessSecret\n    };\n  }\n  /* Request helpers */\n\n\n  writeAuthHeaders(_ref) {\n    let {\n      headers,\n      bodyInSignature,\n      url,\n      method,\n      query,\n      body\n    } = _ref;\n    headers = { ...headers\n    };\n\n    if (this._bearerToken) {\n      headers.Authorization = 'Bearer ' + this._bearerToken;\n    } else if (this._basicToken) {\n      // Basic auth, to request a bearer token\n      headers.Authorization = 'Basic ' + this._basicToken;\n    } else if (this._clientId && this._clientSecret) {\n      // Basic auth with clientId + clientSecret\n      headers.Authorization = 'Basic ' + oauth2_helper_1.OAuth2Helper.getAuthHeader(this._clientId, this._clientSecret);\n    } else if (this._consumerSecret && this._oauth) {\n      // Merge query and body\n      const data = bodyInSignature ? request_param_helper_1.default.mergeQueryAndBodyForOAuth(query, body) : query;\n\n      const auth = this._oauth.authorize({\n        url: url.toString(),\n        method,\n        data\n      }, this.getOAuthAccessTokens());\n\n      headers = { ...headers,\n        ...this._oauth.toHeader(auth)\n      };\n    }\n\n    return headers;\n  }\n\n  getHttpRequestArgs(_ref2) {\n    let {\n      url,\n      method,\n      query: rawQuery = {},\n      body: rawBody = {},\n      headers,\n      forceBodyMode,\n      enableAuth,\n      params\n    } = _ref2;\n    let body = undefined;\n    method = method.toUpperCase();\n    headers = headers !== null && headers !== void 0 ? headers : {}; // Add user agent header (Twitter recommands it)\n\n    if (!headers['x-user-agent']) {\n      headers['x-user-agent'] = 'Node.twitter-api-v2';\n    } // Add protocol to URL if needed\n\n\n    if (!url.startsWith('http')) {\n      url = 'https://' + url;\n    } // Convert URL to object that will receive all URL modifications\n\n\n    const urlObject = new URL(url); // URL without query string to save as endpoint name\n\n    const rawUrl = urlObject.origin + urlObject.pathname; // Apply URL parameters\n\n    if (params) {\n      request_param_helper_1.default.applyRequestParametersToUrl(urlObject, params);\n    } // Build an URL without anything in QS, and QSP in query\n\n\n    const query = request_param_helper_1.default.formatQueryToString(rawQuery);\n    request_param_helper_1.default.moveUrlQueryParamsIntoObject(urlObject, query); // Delete undefined parameters\n\n    if (!(rawBody instanceof Buffer)) {\n      helpers_1.trimUndefinedProperties(rawBody);\n    } // OAuth signature should not include parameters when using multipart.\n\n\n    const bodyType = forceBodyMode !== null && forceBodyMode !== void 0 ? forceBodyMode : request_param_helper_1.default.autoDetectBodyType(urlObject); // If undefined or true, enable auth by headers\n\n    if (enableAuth !== false) {\n      // OAuth needs body signature only if body is URL encoded.\n      const bodyInSignature = ClientRequestMaker.BODY_METHODS.has(method) && bodyType === 'url';\n      headers = this.writeAuthHeaders({\n        headers,\n        bodyInSignature,\n        method,\n        query,\n        url: urlObject,\n        body: rawBody\n      });\n    }\n\n    if (ClientRequestMaker.BODY_METHODS.has(method)) {\n      body = request_param_helper_1.default.constructBodyParams(rawBody, headers, bodyType) || undefined;\n    }\n\n    request_param_helper_1.default.addQueryParamsToUrl(urlObject, query);\n    return {\n      rawUrl,\n      url: urlObject,\n      method,\n      headers,\n      body\n    };\n  }\n\n}\n\nexports.ClientRequestMaker = ClientRequestMaker;\nClientRequestMaker.BODY_METHODS = new Set(['POST', 'PUT', 'PATCH']);","map":{"version":3,"sources":["/Users/tarungunampalli/Documents/twitter-oauth/node_modules/twitter-api-v2/dist/client-mixins/request-maker.mixin.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","ClientRequestMaker","TweetStream_1","require","helpers_1","oauth1_helper_1","request_handler_helper_1","request_param_helper_1","oauth2_helper_1","constructor","_rateLimits","saveRateLimit","originalUrl","rateLimit","send","requestParams","args","getHttpRequestArgs","options","method","headers","timeout","enableRateLimitSave","body","default","setBodyLengthHeader","url","rateLimitSaver","bind","rawUrl","undefined","makeRequest","sendStream","enableAutoConnect","autoConnect","requestData","payloadIsError","stream","connect","buildOAuth","_consumerSecret","_consumerToken","Error","consumerKeys","key","secret","getOAuthAccessTokens","_accessSecret","_accessToken","writeAuthHeaders","bodyInSignature","query","_bearerToken","Authorization","_basicToken","_clientId","_clientSecret","OAuth2Helper","getAuthHeader","_oauth","data","mergeQueryAndBodyForOAuth","auth","authorize","toString","toHeader","rawQuery","rawBody","forceBodyMode","enableAuth","params","toUpperCase","startsWith","urlObject","URL","origin","pathname","applyRequestParametersToUrl","formatQueryToString","moveUrlQueryParamsIntoObject","Buffer","trimUndefinedProperties","bodyType","autoDetectBodyType","BODY_METHODS","has","constructBodyParams","addQueryParamsToUrl","Set"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kBAAR,GAA6B,KAAK,CAAlC;;AACA,MAAMC,aAAa,GAAGR,eAAe,CAACS,OAAO,CAAC,uBAAD,CAAR,CAArC;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAME,eAAe,GAAGX,eAAe,CAACS,OAAO,CAAC,iBAAD,CAAR,CAAvC;;AACA,MAAMG,wBAAwB,GAAGZ,eAAe,CAACS,OAAO,CAAC,0BAAD,CAAR,CAAhD;;AACA,MAAMI,sBAAsB,GAAGb,eAAe,CAACS,OAAO,CAAC,wBAAD,CAAR,CAA9C;;AACA,MAAMK,eAAe,GAAGL,OAAO,CAAC,iBAAD,CAA/B;;AACA,MAAMF,kBAAN,CAAyB;AACrBQ,EAAAA,WAAW,GAAG;AACV,SAAKC,WAAL,GAAmB,EAAnB;AACH;;AACDC,EAAAA,aAAa,CAACC,WAAD,EAAcC,SAAd,EAAyB;AAClC,SAAKH,WAAL,CAAiBE,WAAjB,IAAgCC,SAAhC;AACH;AACD;;;AACAC,EAAAA,IAAI,CAACC,aAAD,EAAgB;AAChB,UAAMC,IAAI,GAAG,KAAKC,kBAAL,CAAwBF,aAAxB,CAAb;AACA,UAAMG,OAAO,GAAG;AAAEC,MAAAA,MAAM,EAAEH,IAAI,CAACG,MAAf;AAAuBC,MAAAA,OAAO,EAAEJ,IAAI,CAACI,OAArC;AAA8CC,MAAAA,OAAO,EAAEN,aAAa,CAACM;AAArE,KAAhB;AACA,UAAMC,mBAAmB,GAAGP,aAAa,CAACO,mBAAd,KAAsC,KAAlE;;AACA,QAAIN,IAAI,CAACO,IAAT,EAAe;AACXhB,MAAAA,sBAAsB,CAACiB,OAAvB,CAA+BC,mBAA/B,CAAmDP,OAAnD,EAA4DF,IAAI,CAACO,IAAjE;AACH;;AACD,WAAO,IAAIjB,wBAAwB,CAACkB,OAA7B,CAAqC;AACxCE,MAAAA,GAAG,EAAEV,IAAI,CAACU,GAD8B;AAExCR,MAAAA,OAFwC;AAGxCK,MAAAA,IAAI,EAAEP,IAAI,CAACO,IAH6B;AAIxCI,MAAAA,cAAc,EAAEL,mBAAmB,GAAG,KAAKX,aAAL,CAAmBiB,IAAnB,CAAwB,IAAxB,EAA8BZ,IAAI,CAACa,MAAnC,CAAH,GAAgDC;AAJ3C,KAArC,EAMFC,WANE,EAAP;AAOH;;AACDC,EAAAA,UAAU,CAACjB,aAAD,EAAgB;AACtB,UAAMC,IAAI,GAAG,KAAKC,kBAAL,CAAwBF,aAAxB,CAAb;AACA,UAAMG,OAAO,GAAG;AAAEC,MAAAA,MAAM,EAAEH,IAAI,CAACG,MAAf;AAAuBC,MAAAA,OAAO,EAAEJ,IAAI,CAACI;AAArC,KAAhB;AACA,UAAME,mBAAmB,GAAGP,aAAa,CAACO,mBAAd,KAAsC,KAAlE;AACA,UAAMW,iBAAiB,GAAGlB,aAAa,CAACmB,WAAd,KAA8B,KAAxD;;AACA,QAAIlB,IAAI,CAACO,IAAT,EAAe;AACXhB,MAAAA,sBAAsB,CAACiB,OAAvB,CAA+BC,mBAA/B,CAAmDP,OAAnD,EAA4DF,IAAI,CAACO,IAAjE;AACH;;AACD,UAAMY,WAAW,GAAG;AAChBT,MAAAA,GAAG,EAAEV,IAAI,CAACU,GADM;AAEhBR,MAAAA,OAFgB;AAGhBK,MAAAA,IAAI,EAAEP,IAAI,CAACO,IAHK;AAIhBI,MAAAA,cAAc,EAAEL,mBAAmB,GAAG,KAAKX,aAAL,CAAmBiB,IAAnB,CAAwB,IAAxB,EAA8BZ,IAAI,CAACa,MAAnC,CAAH,GAAgDC,SAJnE;AAKhBM,MAAAA,cAAc,EAAErB,aAAa,CAACqB;AALd,KAApB;AAOA,UAAMC,MAAM,GAAG,IAAInC,aAAa,CAACsB,OAAlB,CAA0BW,WAA1B,CAAf;;AACA,QAAI,CAACF,iBAAL,EAAwB;AACpB,aAAOI,MAAP;AACH;;AACD,WAAOA,MAAM,CAACC,OAAP,EAAP;AACH;AACD;;;AACAC,EAAAA,UAAU,GAAG;AACT,QAAI,CAAC,KAAKC,eAAN,IAAyB,CAAC,KAAKC,cAAnC,EACI,MAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACJ,WAAO,IAAIrC,eAAe,CAACmB,OAApB,CAA4B;AAC/BmB,MAAAA,YAAY,EAAE;AAAEC,QAAAA,GAAG,EAAE,KAAKH,cAAZ;AAA4BI,QAAAA,MAAM,EAAE,KAAKL;AAAzC;AADiB,KAA5B,CAAP;AAGH;;AACDM,EAAAA,oBAAoB,GAAG;AACnB,QAAI,CAAC,KAAKC,aAAN,IAAuB,CAAC,KAAKC,YAAjC,EACI;AACJ,WAAO;AACHJ,MAAAA,GAAG,EAAE,KAAKI,YADP;AAEHH,MAAAA,MAAM,EAAE,KAAKE;AAFV,KAAP;AAIH;AACD;;;AACAE,EAAAA,gBAAgB,OAAyD;AAAA,QAAxD;AAAE7B,MAAAA,OAAF;AAAW8B,MAAAA,eAAX;AAA4BxB,MAAAA,GAA5B;AAAiCP,MAAAA,MAAjC;AAAyCgC,MAAAA,KAAzC;AAAgD5B,MAAAA;AAAhD,KAAwD;AACrEH,IAAAA,OAAO,GAAG,EAAE,GAAGA;AAAL,KAAV;;AACA,QAAI,KAAKgC,YAAT,EAAuB;AACnBhC,MAAAA,OAAO,CAACiC,aAAR,GAAwB,YAAY,KAAKD,YAAzC;AACH,KAFD,MAGK,IAAI,KAAKE,WAAT,EAAsB;AACvB;AACAlC,MAAAA,OAAO,CAACiC,aAAR,GAAwB,WAAW,KAAKC,WAAxC;AACH,KAHI,MAIA,IAAI,KAAKC,SAAL,IAAkB,KAAKC,aAA3B,EAA0C;AAC3C;AACApC,MAAAA,OAAO,CAACiC,aAAR,GAAwB,WAAW7C,eAAe,CAACiD,YAAhB,CAA6BC,aAA7B,CAA2C,KAAKH,SAAhD,EAA2D,KAAKC,aAAhE,CAAnC;AACH,KAHI,MAIA,IAAI,KAAKhB,eAAL,IAAwB,KAAKmB,MAAjC,EAAyC;AAC1C;AACA,YAAMC,IAAI,GAAGV,eAAe,GAAG3C,sBAAsB,CAACiB,OAAvB,CAA+BqC,yBAA/B,CAAyDV,KAAzD,EAAgE5B,IAAhE,CAAH,GAA2E4B,KAAvG;;AACA,YAAMW,IAAI,GAAG,KAAKH,MAAL,CAAYI,SAAZ,CAAsB;AAC/BrC,QAAAA,GAAG,EAAEA,GAAG,CAACsC,QAAJ,EAD0B;AAE/B7C,QAAAA,MAF+B;AAG/ByC,QAAAA;AAH+B,OAAtB,EAIV,KAAKd,oBAAL,EAJU,CAAb;;AAKA1B,MAAAA,OAAO,GAAG,EAAE,GAAGA,OAAL;AAAc,WAAG,KAAKuC,MAAL,CAAYM,QAAZ,CAAqBH,IAArB;AAAjB,OAAV;AACH;;AACD,WAAO1C,OAAP;AACH;;AACDH,EAAAA,kBAAkB,QAAyG;AAAA,QAAxG;AAAES,MAAAA,GAAF;AAAOP,MAAAA,MAAP;AAAegC,MAAAA,KAAK,EAAEe,QAAQ,GAAG,EAAjC;AAAqC3C,MAAAA,IAAI,EAAE4C,OAAO,GAAG,EAArD;AAAyD/C,MAAAA,OAAzD;AAAkEgD,MAAAA,aAAlE;AAAiFC,MAAAA,UAAjF;AAA6FC,MAAAA;AAA7F,KAAwG;AACvH,QAAI/C,IAAI,GAAGO,SAAX;AACAX,IAAAA,MAAM,GAAGA,MAAM,CAACoD,WAAP,EAAT;AACAnD,IAAAA,OAAO,GAAGA,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyCA,OAAzC,GAAmD,EAA7D,CAHuH,CAIvH;;AACA,QAAI,CAACA,OAAO,CAAC,cAAD,CAAZ,EAA8B;AAC1BA,MAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,qBAA1B;AACH,KAPsH,CAQvH;;;AACA,QAAI,CAACM,GAAG,CAAC8C,UAAJ,CAAe,MAAf,CAAL,EAA6B;AACzB9C,MAAAA,GAAG,GAAG,aAAaA,GAAnB;AACH,KAXsH,CAYvH;;;AACA,UAAM+C,SAAS,GAAG,IAAIC,GAAJ,CAAQhD,GAAR,CAAlB,CAbuH,CAcvH;;AACA,UAAMG,MAAM,GAAG4C,SAAS,CAACE,MAAV,GAAmBF,SAAS,CAACG,QAA5C,CAfuH,CAgBvH;;AACA,QAAIN,MAAJ,EAAY;AACR/D,MAAAA,sBAAsB,CAACiB,OAAvB,CAA+BqD,2BAA/B,CAA2DJ,SAA3D,EAAsEH,MAAtE;AACH,KAnBsH,CAoBvH;;;AACA,UAAMnB,KAAK,GAAG5C,sBAAsB,CAACiB,OAAvB,CAA+BsD,mBAA/B,CAAmDZ,QAAnD,CAAd;AACA3D,IAAAA,sBAAsB,CAACiB,OAAvB,CAA+BuD,4BAA/B,CAA4DN,SAA5D,EAAuEtB,KAAvE,EAtBuH,CAuBvH;;AACA,QAAI,EAAEgB,OAAO,YAAYa,MAArB,CAAJ,EAAkC;AAC9B5E,MAAAA,SAAS,CAAC6E,uBAAV,CAAkCd,OAAlC;AACH,KA1BsH,CA2BvH;;;AACA,UAAMe,QAAQ,GAAGd,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,KAAK,CAAjD,GAAqDA,aAArD,GAAqE7D,sBAAsB,CAACiB,OAAvB,CAA+B2D,kBAA/B,CAAkDV,SAAlD,CAAtF,CA5BuH,CA6BvH;;AACA,QAAIJ,UAAU,KAAK,KAAnB,EAA0B;AACtB;AACA,YAAMnB,eAAe,GAAGjD,kBAAkB,CAACmF,YAAnB,CAAgCC,GAAhC,CAAoClE,MAApC,KAA+C+D,QAAQ,KAAK,KAApF;AACA9D,MAAAA,OAAO,GAAG,KAAK6B,gBAAL,CAAsB;AAAE7B,QAAAA,OAAF;AAAW8B,QAAAA,eAAX;AAA4B/B,QAAAA,MAA5B;AAAoCgC,QAAAA,KAApC;AAA2CzB,QAAAA,GAAG,EAAE+C,SAAhD;AAA2DlD,QAAAA,IAAI,EAAE4C;AAAjE,OAAtB,CAAV;AACH;;AACD,QAAIlE,kBAAkB,CAACmF,YAAnB,CAAgCC,GAAhC,CAAoClE,MAApC,CAAJ,EAAiD;AAC7CI,MAAAA,IAAI,GAAGhB,sBAAsB,CAACiB,OAAvB,CAA+B8D,mBAA/B,CAAmDnB,OAAnD,EAA4D/C,OAA5D,EAAqE8D,QAArE,KAAkFpD,SAAzF;AACH;;AACDvB,IAAAA,sBAAsB,CAACiB,OAAvB,CAA+B+D,mBAA/B,CAAmDd,SAAnD,EAA8DtB,KAA9D;AACA,WAAO;AACHtB,MAAAA,MADG;AAEHH,MAAAA,GAAG,EAAE+C,SAFF;AAGHtD,MAAAA,MAHG;AAIHC,MAAAA,OAJG;AAKHG,MAAAA;AALG,KAAP;AAOH;;AApIoB;;AAsIzBxB,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B;AACAA,kBAAkB,CAACmF,YAAnB,GAAkC,IAAII,GAAJ,CAAQ,CAAC,MAAD,EAAS,KAAT,EAAgB,OAAhB,CAAR,CAAlC","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ClientRequestMaker = void 0;\nconst TweetStream_1 = __importDefault(require(\"../stream/TweetStream\"));\nconst helpers_1 = require(\"../helpers\");\nconst oauth1_helper_1 = __importDefault(require(\"./oauth1.helper\"));\nconst request_handler_helper_1 = __importDefault(require(\"./request-handler.helper\"));\nconst request_param_helper_1 = __importDefault(require(\"./request-param.helper\"));\nconst oauth2_helper_1 = require(\"./oauth2.helper\");\nclass ClientRequestMaker {\n    constructor() {\n        this._rateLimits = {};\n    }\n    saveRateLimit(originalUrl, rateLimit) {\n        this._rateLimits[originalUrl] = rateLimit;\n    }\n    /** Send a new request and returns a wrapped `Promise<TwitterResponse<T>`. */\n    send(requestParams) {\n        const args = this.getHttpRequestArgs(requestParams);\n        const options = { method: args.method, headers: args.headers, timeout: requestParams.timeout };\n        const enableRateLimitSave = requestParams.enableRateLimitSave !== false;\n        if (args.body) {\n            request_param_helper_1.default.setBodyLengthHeader(options, args.body);\n        }\n        return new request_handler_helper_1.default({\n            url: args.url,\n            options,\n            body: args.body,\n            rateLimitSaver: enableRateLimitSave ? this.saveRateLimit.bind(this, args.rawUrl) : undefined,\n        })\n            .makeRequest();\n    }\n    sendStream(requestParams) {\n        const args = this.getHttpRequestArgs(requestParams);\n        const options = { method: args.method, headers: args.headers };\n        const enableRateLimitSave = requestParams.enableRateLimitSave !== false;\n        const enableAutoConnect = requestParams.autoConnect !== false;\n        if (args.body) {\n            request_param_helper_1.default.setBodyLengthHeader(options, args.body);\n        }\n        const requestData = {\n            url: args.url,\n            options,\n            body: args.body,\n            rateLimitSaver: enableRateLimitSave ? this.saveRateLimit.bind(this, args.rawUrl) : undefined,\n            payloadIsError: requestParams.payloadIsError,\n        };\n        const stream = new TweetStream_1.default(requestData);\n        if (!enableAutoConnect) {\n            return stream;\n        }\n        return stream.connect();\n    }\n    /* Token helpers */\n    buildOAuth() {\n        if (!this._consumerSecret || !this._consumerToken)\n            throw new Error('Invalid consumer tokens');\n        return new oauth1_helper_1.default({\n            consumerKeys: { key: this._consumerToken, secret: this._consumerSecret },\n        });\n    }\n    getOAuthAccessTokens() {\n        if (!this._accessSecret || !this._accessToken)\n            return;\n        return {\n            key: this._accessToken,\n            secret: this._accessSecret,\n        };\n    }\n    /* Request helpers */\n    writeAuthHeaders({ headers, bodyInSignature, url, method, query, body }) {\n        headers = { ...headers };\n        if (this._bearerToken) {\n            headers.Authorization = 'Bearer ' + this._bearerToken;\n        }\n        else if (this._basicToken) {\n            // Basic auth, to request a bearer token\n            headers.Authorization = 'Basic ' + this._basicToken;\n        }\n        else if (this._clientId && this._clientSecret) {\n            // Basic auth with clientId + clientSecret\n            headers.Authorization = 'Basic ' + oauth2_helper_1.OAuth2Helper.getAuthHeader(this._clientId, this._clientSecret);\n        }\n        else if (this._consumerSecret && this._oauth) {\n            // Merge query and body\n            const data = bodyInSignature ? request_param_helper_1.default.mergeQueryAndBodyForOAuth(query, body) : query;\n            const auth = this._oauth.authorize({\n                url: url.toString(),\n                method,\n                data,\n            }, this.getOAuthAccessTokens());\n            headers = { ...headers, ...this._oauth.toHeader(auth) };\n        }\n        return headers;\n    }\n    getHttpRequestArgs({ url, method, query: rawQuery = {}, body: rawBody = {}, headers, forceBodyMode, enableAuth, params, }) {\n        let body = undefined;\n        method = method.toUpperCase();\n        headers = headers !== null && headers !== void 0 ? headers : {};\n        // Add user agent header (Twitter recommands it)\n        if (!headers['x-user-agent']) {\n            headers['x-user-agent'] = 'Node.twitter-api-v2';\n        }\n        // Add protocol to URL if needed\n        if (!url.startsWith('http')) {\n            url = 'https://' + url;\n        }\n        // Convert URL to object that will receive all URL modifications\n        const urlObject = new URL(url);\n        // URL without query string to save as endpoint name\n        const rawUrl = urlObject.origin + urlObject.pathname;\n        // Apply URL parameters\n        if (params) {\n            request_param_helper_1.default.applyRequestParametersToUrl(urlObject, params);\n        }\n        // Build an URL without anything in QS, and QSP in query\n        const query = request_param_helper_1.default.formatQueryToString(rawQuery);\n        request_param_helper_1.default.moveUrlQueryParamsIntoObject(urlObject, query);\n        // Delete undefined parameters\n        if (!(rawBody instanceof Buffer)) {\n            helpers_1.trimUndefinedProperties(rawBody);\n        }\n        // OAuth signature should not include parameters when using multipart.\n        const bodyType = forceBodyMode !== null && forceBodyMode !== void 0 ? forceBodyMode : request_param_helper_1.default.autoDetectBodyType(urlObject);\n        // If undefined or true, enable auth by headers\n        if (enableAuth !== false) {\n            // OAuth needs body signature only if body is URL encoded.\n            const bodyInSignature = ClientRequestMaker.BODY_METHODS.has(method) && bodyType === 'url';\n            headers = this.writeAuthHeaders({ headers, bodyInSignature, method, query, url: urlObject, body: rawBody });\n        }\n        if (ClientRequestMaker.BODY_METHODS.has(method)) {\n            body = request_param_helper_1.default.constructBodyParams(rawBody, headers, bodyType) || undefined;\n        }\n        request_param_helper_1.default.addQueryParamsToUrl(urlObject, query);\n        return {\n            rawUrl,\n            url: urlObject,\n            method,\n            headers,\n            body,\n        };\n    }\n}\nexports.ClientRequestMaker = ClientRequestMaker;\nClientRequestMaker.BODY_METHODS = new Set(['POST', 'PUT', 'PATCH']);\n"]},"metadata":{},"sourceType":"script"}